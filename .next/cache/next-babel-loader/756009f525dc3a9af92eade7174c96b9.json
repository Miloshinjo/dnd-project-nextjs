{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useDebounce = (value, delay) => {\n  // State and setters for debounced value\n  const {\n    0: debouncedValue,\n    1: setDebouncedValue\n  } = useState(value);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};\n\nexport { useDebounce as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/hooks/useDebounce.ts"],"names":["useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","default"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpC;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCN,QAAQ,CAACG,KAAD,CAApD;AAEAF,EAAAA,SAAS,CACP,MAAM;AACJ;AACA,UAAMM,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFI,CAMJ;AACA;AACA;;AACA,WAAO,MAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAbM,EAcP,CAACJ,KAAD,EAAQC,KAAR,CAdO,CAcS;AAdT,GAAT;AAiBA,SAAOC,cAAP;AACD,CAtBD;;AAwBA,SAASH,WAAW,IAAIQ,OAAxB","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useDebounce = (value, delay) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  )\n\n  return debouncedValue\n}\n\nexport { useDebounce as default }\n"]},"metadata":{},"sourceType":"module"}