{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-spells/paladin/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { useSpellsQuery } from '../../../../../generated/graphql';\nimport SpellSlots from '../spell-slots';\nimport SpellsKnown from '../spells-known';\nimport SpellsPrepared from '../spells-prepared';\nimport { abilityScoreM } from '../../../../../utils/character';\nimport styles from './styles.module.css';\n\nvar Paladin = function Paladin(_ref) {\n  _s();\n\n  var character = _ref.character;\n  var spellSlots = character.spellSlots ? JSON.parse(character.spellSlots) : [];\n\n  var _useSpellsQuery = useSpellsQuery({\n    variables: {\n      klassName: 'paladin'\n    }\n  }),\n      _useSpellsQuery2 = _slicedToArray(_useSpellsQuery, 1),\n      paladinSpells = _useSpellsQuery2[0].data;\n\n  var _useState = useState(false),\n      spellsPrepareMode = _useState[0],\n      setSpellsPrepareMode = _useState[1];\n\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(SpellSlots, {\n    spellSlots: spellSlots,\n    characterId: character.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), __jsx(SpellsPrepared, {\n    characterId: character.id,\n    spells: character.preparedSpells,\n    setSpellsPrepareMode: setSpellsPrepareMode,\n    spellsPrepareMode: spellsPrepareMode,\n    numberOfSpellsPrepared: character.level + abilityScoreM(character.charisma),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), __jsx(SpellsKnown, {\n    spells: (paladinSpells === null || paladinSpells === void 0 ? void 0 : paladinSpells.spells.filter(function (spell) {\n      return spell.level !== 0;\n    })) || [],\n    characterId: character.id,\n    title: \"Paladin Spells\",\n    learnControls: false,\n    spellsPreparedIds: character.preparedSpells.map(function (spell) {\n      return spell.id;\n    }),\n    spellsPrepareMode: spellsPrepareMode,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Paladin, \"pgu+B4u3Y7eNJk5/f40BNS2m454=\", false, function () {\n  return [useSpellsQuery];\n});\n\n_c = Paladin;\nexport { Paladin as default };\n\nvar _c;\n\n$RefreshReg$(_c, \"Paladin\");","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-spells/paladin/index.tsx"],"names":["useState","useSpellsQuery","SpellSlots","SpellsKnown","SpellsPrepared","abilityScoreM","styles","Paladin","character","spellSlots","JSON","parse","variables","klassName","paladinSpells","data","spellsPrepareMode","setSpellsPrepareMode","container","id","preparedSpells","level","charisma","spells","filter","spell","map","default"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,cAAT,QAA+B,kCAA/B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAASC,aAAT,QAA8B,gCAA9B;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;AAMA,IAAMC,OAAwB,GAAG,SAA3BA,OAA2B,OAAmB;AAAA;;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAClD,MAAMC,UAAU,GAAGD,SAAS,CAACC,UAAV,GACfC,IAAI,CAACC,KAAL,CAAWH,SAAS,CAACC,UAArB,CADe,GAEf,EAFJ;;AADkD,wBAKhBR,cAAc,CAAC;AAC/CW,IAAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb;AADoC,GAAD,CALE;AAAA;AAAA,MAKnCC,aALmC,uBAKzCC,IALyC;;AAAA,kBASAf,QAAQ,CAAU,KAAV,CATR;AAAA,MAS3CgB,iBAT2C;AAAA,MASxBC,oBATwB;;AAWlD,SACE;AAAK,IAAA,SAAS,EAAEX,MAAM,CAACY,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,UAAU,EAAET,UAAxB;AAAoC,IAAA,WAAW,EAAED,SAAS,CAACW,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,cAAD;AACE,IAAA,WAAW,EAAEX,SAAS,CAACW,EADzB;AAEE,IAAA,MAAM,EAAEX,SAAS,CAACY,cAFpB;AAGE,IAAA,oBAAoB,EAAEH,oBAHxB;AAIE,IAAA,iBAAiB,EAAED,iBAJrB;AAKE,IAAA,sBAAsB,EACpBR,SAAS,CAACa,KAAV,GAAkBhB,aAAa,CAACG,SAAS,CAACc,QAAX,CANnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAWE,MAAC,WAAD;AACE,IAAA,MAAM,EACJ,CAAAR,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAES,MAAf,CAAsBC,MAAtB,CAA6B,UAACC,KAAD;AAAA,aAAWA,KAAK,CAACJ,KAAN,KAAgB,CAA3B;AAAA,KAA7B,MAA8D,EAFlE;AAIE,IAAA,WAAW,EAAEb,SAAS,CAACW,EAJzB;AAKE,IAAA,KAAK,EAAC,gBALR;AAME,IAAA,aAAa,EAAE,KANjB;AAOE,IAAA,iBAAiB,EAAEX,SAAS,CAACY,cAAV,CAAyBM,GAAzB,CAA6B,UAACD,KAAD;AAAA,aAAWA,KAAK,CAACN,EAAjB;AAAA,KAA7B,CAPrB;AAQE,IAAA,iBAAiB,EAAEH,iBARrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAwBD,CAnCD;;GAAMT,O;UAK8BN,c;;;KAL9BM,O;AAqCN,SAASA,OAAO,IAAIoB,OAApB","sourcesContent":["import { useState } from 'react'\nimport { CharacterUI } from '../../../../../models/character'\nimport { useSpellsQuery } from '../../../../../generated/graphql'\nimport SpellSlots from '../spell-slots'\nimport SpellsKnown from '../spells-known'\nimport SpellsPrepared from '../spells-prepared'\nimport { abilityScoreM } from '../../../../../utils/character'\n\nimport styles from './styles.module.css'\n\ntype Props = {\n  character: CharacterUI\n}\n\nconst Paladin: React.FC<Props> = ({ character }) => {\n  const spellSlots = character.spellSlots\n    ? JSON.parse(character.spellSlots)\n    : []\n\n  const [{ data: paladinSpells }] = useSpellsQuery({\n    variables: { klassName: 'paladin' },\n  })\n\n  const [spellsPrepareMode, setSpellsPrepareMode] = useState<boolean>(false)\n\n  return (\n    <div className={styles.container}>\n      <SpellSlots spellSlots={spellSlots} characterId={character.id} />\n      <SpellsPrepared\n        characterId={character.id}\n        spells={character.preparedSpells}\n        setSpellsPrepareMode={setSpellsPrepareMode}\n        spellsPrepareMode={spellsPrepareMode}\n        numberOfSpellsPrepared={\n          character.level + abilityScoreM(character.charisma)\n        }\n      />\n      <SpellsKnown\n        spells={\n          paladinSpells?.spells.filter((spell) => spell.level !== 0) || []\n        }\n        characterId={character.id}\n        title=\"Paladin Spells\"\n        learnControls={false}\n        spellsPreparedIds={character.preparedSpells.map((spell) => spell.id)}\n        spellsPrepareMode={spellsPrepareMode}\n      />\n    </div>\n  )\n}\n\nexport { Paladin as default }\n"]},"metadata":{},"sourceType":"module"}