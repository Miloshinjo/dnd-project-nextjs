{"ast":null,"code":"var _jsxFileName = \"/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/form/select-input/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Controller } from 'react-hook-form';\nimport Select from 'react-select';\nimport styles from './styles.module.css';\n\nconst SelectInput = ({\n  options,\n  errors,\n  label,\n  name,\n  control,\n  value = ''\n}) => {\n  const colourStyles = {\n    control: (styles, {\n      data,\n      isDisabled,\n      isFocused,\n      isSelected,\n      isHovered\n    }) => _objectSpread(_objectSpread({}, styles), {}, {\n      cursor: 'pointer',\n      border: '1px solid #EDF2F7',\n      boxShadow: isFocused ? '0 0 0 3px rgba(66, 153, 225, 0.5) !important' : 'none',\n      '&:hover': {}\n    }),\n    option: (styles, {\n      data,\n      isDisabled,\n      isFocused,\n      isSelected\n    }) => _objectSpread(_objectSpread({}, styles), {}, {\n      cursor: 'pointer',\n      backgroundColor: isFocused ? '#EDF2F7' : '',\n      color: isSelected ? '#000' : ''\n    })\n  };\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    className: styles.label,\n    htmlFor: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, label), __jsx(\"div\", {\n    className: styles.selectContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(Controller, {\n    styles: colourStyles,\n    instanceId: name,\n    as: Select,\n    options: options,\n    name: name,\n    control: control,\n    rules: {\n      required: true\n    },\n    value: value,\n    onBlur: event => event.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), errors[name] && __jsx(\"span\", {\n    role: \"alert\",\n    className: styles.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, errors[name].message));\n};\n\nexport { SelectInput as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/form/select-input/index.tsx"],"names":["Controller","Select","styles","SelectInput","options","errors","label","name","control","value","colourStyles","data","isDisabled","isFocused","isSelected","isHovered","cursor","border","boxShadow","option","backgroundColor","color","selectContainer","required","event","preventDefault","error","message","default"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;AAcA,MAAMC,WAA4B,GAAG,CAAC;AACpCC,EAAAA,OADoC;AAEpCC,EAAAA,MAFoC;AAGpCC,EAAAA,KAHoC;AAIpCC,EAAAA,IAJoC;AAKpCC,EAAAA,OALoC;AAMpCC,EAAAA,KAAK,GAAG;AAN4B,CAAD,KAO/B;AACJ,QAAMC,YAAY,GAAG;AACnBF,IAAAA,OAAO,EAAE,CACPN,MADO,EAEP;AAAES,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,SAApB;AAA+BC,MAAAA,UAA/B;AAA2CC,MAAAA;AAA3C,KAFO,qCAIJb,MAJI;AAKPc,MAAAA,MAAM,EAAE,SALD;AAMPC,MAAAA,MAAM,EAAE,mBAND;AAOPC,MAAAA,SAAS,EAAEL,SAAS,GAChB,8CADgB,GAEhB,MATG;AAUP,iBAAW;AAVJ,MADU;AAanBM,IAAAA,MAAM,EAAE,CAACjB,MAAD,EAAS;AAAES,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,SAApB;AAA+BC,MAAAA;AAA/B,KAAT,qCACHZ,MADG;AAENc,MAAAA,MAAM,EAAE,SAFF;AAGNI,MAAAA,eAAe,EAAEP,SAAS,GAAG,SAAH,GAAe,EAHnC;AAINQ,MAAAA,KAAK,EAAEP,UAAU,GAAG,MAAH,GAAY;AAJvB;AAbW,GAArB;AAqBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAEZ,MAAM,CAACI,KAAzB;AAAgC,IAAA,OAAO,EAAEC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KADH,CADF,EAIE;AAAK,IAAA,SAAS,EAAEJ,MAAM,CAACoB,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,MAAM,EAAEZ,YADV;AAEE,IAAA,UAAU,EAAEH,IAFd;AAGE,IAAA,EAAE,EAAEN,MAHN;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,IAAI,EAAEG,IALR;AAME,IAAA,OAAO,EAAEC,OANX;AAOE,IAAA,KAAK,EAAE;AAAEe,MAAAA,QAAQ,EAAE;AAAZ,KAPT;AAQE,IAAA,KAAK,EAAEd,KART;AASE,IAAA,MAAM,EAAGe,KAAD,IAAWA,KAAK,CAACC,cAAN,EATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,EAiBGpB,MAAM,CAACE,IAAD,CAAN,IACC;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,SAAS,EAAEL,MAAM,CAACwB,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,MAAM,CAACE,IAAD,CAAN,CAAaoB,OADhB,CAlBJ,CADF;AAyBD,CAtDD;;AAwDA,SAASxB,WAAW,IAAIyB,OAAxB","sourcesContent":["import { Controller } from 'react-hook-form'\nimport Select from 'react-select'\n\nimport styles from './styles.module.css'\n\ntype Props = {\n  label: string\n  errors: Record<any, any>\n  options: Array<{\n    label: string\n    value: any\n  }>\n  name: string\n  control: any\n  value?: any\n}\n\nconst SelectInput: React.FC<Props> = ({\n  options,\n  errors,\n  label,\n  name,\n  control,\n  value = '',\n}) => {\n  const colourStyles = {\n    control: (\n      styles,\n      { data, isDisabled, isFocused, isSelected, isHovered },\n    ) => ({\n      ...styles,\n      cursor: 'pointer',\n      border: '1px solid #EDF2F7',\n      boxShadow: isFocused\n        ? '0 0 0 3px rgba(66, 153, 225, 0.5) !important'\n        : 'none',\n      '&:hover': {},\n    }),\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => ({\n      ...styles,\n      cursor: 'pointer',\n      backgroundColor: isFocused ? '#EDF2F7' : '',\n      color: isSelected ? '#000' : '',\n    }),\n  }\n\n  return (\n    <div>\n      <label className={styles.label} htmlFor={name}>\n        {label}\n      </label>\n      <div className={styles.selectContainer}>\n        <Controller\n          styles={colourStyles}\n          instanceId={name}\n          as={Select}\n          options={options}\n          name={name}\n          control={control}\n          rules={{ required: true }}\n          value={value}\n          onBlur={(event) => event.preventDefault()}\n        />\n      </div>\n      {errors[name] && (\n        <span role=\"alert\" className={styles.error}>\n          {errors[name].message}\n        </span>\n      )}\n    </div>\n  )\n}\n\nexport { SelectInput as default }\n"]},"metadata":{},"sourceType":"module"}