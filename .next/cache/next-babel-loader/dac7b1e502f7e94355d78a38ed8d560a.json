{"ast":null,"code":"var abilityScoreM = function abilityScoreM(abilityScore) {\n  return Math.floor((abilityScore - 10) / 2);\n};\n\nvar proficiencyBonus = function proficiencyBonus(level) {\n  return Math.ceil(1 + level * 0.25);\n};\n\nvar initiative = function initiative(dexterity) {\n  return abilityScoreM(dexterity);\n};\n\nvar savingThrow = function savingThrow(klass, ability, abilityScoreModifier, proficiencyBonus, level) {\n  var savingThrows = {\n    strength: ['Barbarian', 'Fighter', 'Monk', 'Ranger'],\n    dexterity: ['Bard', 'Monk', 'Ranger', 'Rogue'],\n    constitution: ['Barbarian', 'Fighter', 'Sorcerer'],\n    intelligence: ['Wizard', 'Druid', 'Rogue'],\n    wisdom: ['Wizard', 'Cleric', 'Druid', 'Paladin', 'Warlock'],\n    charisma: ['Bard', 'Cleric', 'Paladin', 'Sorcerer', 'Warlock']\n  }; // Monks get Diamond Soul on level 14 (proficient in all saves)\n\n  if (klass === 'Monk' && level >= 14) {\n    return abilityScoreModifier + proficiencyBonus;\n  } // Rogues get proficient saving throws on level 15 in WIS\n\n\n  if (klass === 'Rogue' && level >= 15 && ability === 'wisdom') {\n    return abilityScoreModifier + proficiencyBonus;\n  }\n\n  if (savingThrows[ability].includes(klass)) {\n    return abilityScoreModifier + proficiencyBonus;\n  }\n\n  return abilityScoreModifier;\n};\n\nvar passivePerception = function passivePerception(wisdomModifier, proficiencyBonus, isProficient) {\n  return isProficient ? 10 + wisdomModifier + proficiencyBonus : 10 + wisdomModifier;\n};\n\nvar passiveInvestigation = function passiveInvestigation(intellligenceModifier, proficiencyBonus, isProficient) {\n  return isProficient ? 10 + intellligenceModifier + proficiencyBonus : 10 + intellligenceModifier;\n};\n\nvar passiveInsight = function passiveInsight(wisdomModifier, proficiencyBonus, isProficient) {\n  return isProficient ? 10 + wisdomModifier + proficiencyBonus : 10 + wisdomModifier;\n};\n\nvar hitBonus = function hitBonus(proficiencyBonus, abilityModifier) {\n  return proficiencyBonus + abilityModifier;\n};\n\nvar sneakAttack = function sneakAttack(level) {\n  if (level === 1) return 1;\n  return Math.ceil(level / 2);\n};\n\nvar calculateSkill = function calculateSkill(isProficient, abilityScoreModifier, proficiencyBonus) {\n  if (isProficient) {\n    return abilityScoreModifier + proficiencyBonus;\n  }\n\n  return abilityScoreModifier;\n};\n\nvar spellHit = function spellHit(abilityScoreModifier, proficiencyBonus) {\n  return abilityScoreModifier + proficiencyBonus;\n};\n\nvar spellSaveDc = function spellSaveDc(abilityScoreModifier, proficiencyBonus) {\n  return 8 + abilityScoreModifier + proficiencyBonus;\n};\n\nvar subclassTitle = {\n  Barbarian: 'Primal Path',\n  Bard: 'Bard College',\n  Druid: 'Druid Circle',\n  Cleric: 'Divine Domain',\n  Monk: 'Monastic Tradition',\n  Paladin: 'Sacred Oath',\n  Fighter: 'Martial Archetype',\n  Rogue: 'Roguish Archetype',\n  Ranger: 'Ranger Conclave',\n  Sorcerer: 'Sorcerous Origin',\n  Warlock: 'Otherworldly Patron',\n  Wizard: 'Arcane Tradition'\n};\nexport { abilityScoreM, calculateSkill, hitBonus, initiative, passiveInsight, passiveInvestigation, passivePerception, proficiencyBonus, savingThrow, sneakAttack, spellHit, spellSaveDc, subclassTitle };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/utils/character.ts"],"names":["abilityScoreM","abilityScore","Math","floor","proficiencyBonus","level","ceil","initiative","dexterity","savingThrow","klass","ability","abilityScoreModifier","savingThrows","strength","constitution","intelligence","wisdom","charisma","includes","passivePerception","wisdomModifier","isProficient","passiveInvestigation","intellligenceModifier","passiveInsight","hitBonus","abilityModifier","sneakAttack","calculateSkill","spellHit","spellSaveDc","subclassTitle","Barbarian","Bard","Druid","Cleric","Monk","Paladin","Fighter","Rogue","Ranger","Sorcerer","Warlock","Wizard"],"mappings":"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","sourcesContent":["const abilityScoreM = (abilityScore: number): number =>\n  Math.floor((abilityScore - 10) / 2)\n\nconst proficiencyBonus = (level: number): number => Math.ceil(1 + level * 0.25)\n\nconst initiative = (dexterity: number): number => abilityScoreM(dexterity)\n\nconst savingThrow = (\n  klass: string,\n  ability: string,\n  abilityScoreModifier: number,\n  proficiencyBonus: number,\n  level: number,\n): number => {\n  const savingThrows = {\n    strength: ['Barbarian', 'Fighter', 'Monk', 'Ranger'],\n    dexterity: ['Bard', 'Monk', 'Ranger', 'Rogue'],\n    constitution: ['Barbarian', 'Fighter', 'Sorcerer'],\n    intelligence: ['Wizard', 'Druid', 'Rogue'],\n    wisdom: ['Wizard', 'Cleric', 'Druid', 'Paladin', 'Warlock'],\n    charisma: ['Bard', 'Cleric', 'Paladin', 'Sorcerer', 'Warlock'],\n  }\n\n  // Monks get Diamond Soul on level 14 (proficient in all saves)\n  if (klass === 'Monk' && level >= 14) {\n    return abilityScoreModifier + proficiencyBonus\n  }\n\n  // Rogues get proficient saving throws on level 15 in WIS\n  if (klass === 'Rogue' && level >= 15 && ability === 'wisdom') {\n    return abilityScoreModifier + proficiencyBonus\n  }\n\n  if (savingThrows[ability].includes(klass)) {\n    return abilityScoreModifier + proficiencyBonus\n  }\n\n  return abilityScoreModifier\n}\n\nconst passivePerception = (\n  wisdomModifier: number,\n  proficiencyBonus: number,\n  isProficient: boolean,\n): number =>\n  isProficient ? 10 + wisdomModifier + proficiencyBonus : 10 + wisdomModifier\n\nconst passiveInvestigation = (\n  intellligenceModifier: number,\n  proficiencyBonus: number,\n  isProficient: boolean,\n): number =>\n  isProficient\n    ? 10 + intellligenceModifier + proficiencyBonus\n    : 10 + intellligenceModifier\n\nconst passiveInsight = (\n  wisdomModifier: number,\n  proficiencyBonus: number,\n  isProficient: boolean,\n): number =>\n  isProficient ? 10 + wisdomModifier + proficiencyBonus : 10 + wisdomModifier\n\nconst hitBonus = (proficiencyBonus: number, abilityModifier: number): number =>\n  proficiencyBonus + abilityModifier\n\nconst sneakAttack = (level: number) => {\n  if (level === 1) return 1\n  return Math.ceil(level / 2)\n}\n\nconst calculateSkill = (\n  isProficient: boolean,\n  abilityScoreModifier: number,\n  proficiencyBonus: number,\n): number => {\n  if (isProficient) {\n    return abilityScoreModifier + proficiencyBonus\n  }\n\n  return abilityScoreModifier\n}\n\nconst spellHit = (\n  abilityScoreModifier: number,\n  proficiencyBonus: number,\n): number => {\n  return abilityScoreModifier + proficiencyBonus\n}\n\nconst spellSaveDc = (\n  abilityScoreModifier: number,\n  proficiencyBonus: number,\n): number => {\n  return 8 + abilityScoreModifier + proficiencyBonus\n}\n\nconst subclassTitle = {\n  Barbarian: 'Primal Path',\n  Bard: 'Bard College',\n  Druid: 'Druid Circle',\n  Cleric: 'Divine Domain',\n  Monk: 'Monastic Tradition',\n  Paladin: 'Sacred Oath',\n  Fighter: 'Martial Archetype',\n  Rogue: 'Roguish Archetype',\n  Ranger: 'Ranger Conclave',\n  Sorcerer: 'Sorcerous Origin',\n  Warlock: 'Otherworldly Patron',\n  Wizard: 'Arcane Tradition',\n}\n\nexport {\n  abilityScoreM,\n  calculateSkill,\n  hitBonus,\n  initiative,\n  passiveInsight,\n  passiveInvestigation,\n  passivePerception,\n  proficiencyBonus,\n  savingThrow,\n  sneakAttack,\n  spellHit,\n  spellSaveDc,\n  subclassTitle,\n}\n"]},"metadata":{},"sourceType":"module"}