{"ast":null,"code":"import { queryField, idArg } from '@nexus/schema';\nimport errors from '../../../utils/errors';\nimport { handleError } from '../../../utils/helpers';\nexport const klasses = queryField('klasses', {\n  type: 'Klass',\n  list: true,\n  resolve: async (parent, args, {\n    prisma\n  }) => {\n    try {\n      const klasses = await prisma.klass.findMany({\n        orderBy: {\n          name: 'asc'\n        }\n      });\n      return klasses;\n    } catch (err) {\n      console.log(err);\n      return handleError(errors.serverError);\n    }\n  }\n});\nexport const klass = queryField('klass', {\n  type: 'Klass',\n  args: {\n    id: idArg()\n  },\n  resolve: async (parent, {\n    id\n  }, {\n    prisma\n  }) => {\n    try {\n      const klass = await prisma.klass.findOne({\n        where: {\n          id\n        }\n      });\n      return klass;\n    } catch (err) {\n      console.log(err);\n      return handleError(errors.serverError);\n    }\n  }\n});","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/server/types/resolvers/queries/klass.ts"],"names":["queryField","idArg","errors","handleError","klasses","type","list","resolve","parent","args","prisma","klass","findMany","orderBy","name","err","console","log","serverError","id","findOne","where"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,KAArB,QAAkC,eAAlC;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,OAAO,MAAMC,OAAO,GAAGJ,UAAU,CAAC,SAAD,EAAY;AAC3CK,EAAAA,IAAI,EAAE,OADqC;AAE3CC,EAAAA,IAAI,EAAE,IAFqC;AAG3CC,EAAAA,OAAO,EAAE,OAAOC,MAAP,EAAeC,IAAf,EAAqB;AAAEC,IAAAA;AAAF,GAArB,KAAoC;AAC3C,QAAI;AACF,YAAMN,OAAO,GAAG,MAAMM,MAAM,CAACC,KAAP,CAAaC,QAAb,CAAsB;AAC1CC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE;AADC;AADiC,OAAtB,CAAtB;AAMA,aAAOV,OAAP;AACD,KARD,CAQE,OAAOW,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOZ,WAAW,CAACD,MAAM,CAACgB,WAAR,CAAlB;AACD;AACF;AAhB0C,CAAZ,CAA1B;AAmBP,OAAO,MAAMP,KAAK,GAAGX,UAAU,CAAC,OAAD,EAAU;AACvCK,EAAAA,IAAI,EAAE,OADiC;AAEvCI,EAAAA,IAAI,EAAE;AACJU,IAAAA,EAAE,EAAElB,KAAK;AADL,GAFiC;AAKvCM,EAAAA,OAAO,EAAE,OAAOC,MAAP,EAAe;AAAEW,IAAAA;AAAF,GAAf,EAAuB;AAAET,IAAAA;AAAF,GAAvB,KAAsC;AAC7C,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMD,MAAM,CAACC,KAAP,CAAaS,OAAb,CAAqB;AACvCC,QAAAA,KAAK,EAAE;AAAEF,UAAAA;AAAF;AADgC,OAArB,CAApB;AAGA,aAAOR,KAAP;AACD,KALD,CAKE,OAAOI,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOZ,WAAW,CAACD,MAAM,CAACgB,WAAR,CAAlB;AACD;AACF;AAfsC,CAAV,CAAxB","sourcesContent":["import { queryField, idArg } from '@nexus/schema'\n\nimport errors from '../../../utils/errors'\nimport { handleError } from '../../../utils/helpers'\n\nexport const klasses = queryField('klasses', {\n  type: 'Klass',\n  list: true,\n  resolve: async (parent, args, { prisma }) => {\n    try {\n      const klasses = await prisma.klass.findMany({\n        orderBy: {\n          name: 'asc',\n        },\n      })\n\n      return klasses\n    } catch (err) {\n      console.log(err)\n      return handleError(errors.serverError)\n    }\n  },\n})\n\nexport const klass = queryField('klass', {\n  type: 'Klass',\n  args: {\n    id: idArg(),\n  },\n  resolve: async (parent, { id }, { prisma }) => {\n    try {\n      const klass = await prisma.klass.findOne({\n        where: { id },\n      })\n      return klass\n    } catch (err) {\n      console.log(err)\n      return handleError(errors.serverError)\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}