{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nvar useDebounce = function useDebounce(value, delay) {\n  _s();\n\n  // State and setters for debounced value\n  var _useState = useState(value),\n      debouncedValue = _useState[0],\n      setDebouncedValue = _useState[1];\n\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};\n\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\n\nexport { useDebounce as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/hooks/useDebounce.ts"],"names":["useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","default"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA;;AACpC;AADoC,kBAEQJ,QAAQ,CAACG,KAAD,CAFhB;AAAA,MAE7BE,cAF6B;AAAA,MAEbC,iBAFa;;AAIpCL,EAAAA,SAAS,CACP,YAAM;AACJ;AACA,QAAMM,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFI,CAMJ;AACA;AACA;;AACA,WAAO,YAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAbM,EAcP,CAACJ,KAAD,EAAQC,KAAR,CAdO,CAcS;AAdT,GAAT;AAiBA,SAAOC,cAAP;AACD,CAtBD;;GAAMH,W;;AAwBN,SAASA,WAAW,IAAIQ,OAAxB","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useDebounce = (value, delay) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  )\n\n  return debouncedValue\n}\n\nexport { useDebounce as default }\n"]},"metadata":{},"sourceType":"module"}