{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { CharacterDocument, SkillsDocument } from '../generated/graphql';\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, function (data) {\n    return fn(result, data);\n  });\n}\n\nfunction invalidateAllCharacters(cache) {\n  var allFields = cache.inspectFields('Query');\n  var fieldInfos = allFields.filter(function (info) {\n    return info.fieldName === 'characters';\n  });\n  fieldInfos.forEach(function (fi) {\n    cache.invalidate('Query', 'characters', fi.arguments || {});\n  });\n}\n\nvar cache = cacheExchange({\n  updates: {\n    Mutation: {\n      createCharacter: function createCharacter(result, args, cache, info) {\n        cache.invalidate('Query', 'characters');\n      },\n      deleteCharacter: function deleteCharacter(result, args, cache, info) {\n        cache.invalidate({\n          __typename: 'Character',\n          id: args.character.id\n        });\n      }\n    }\n  },\n  optimistic: {\n    updateCharacter: function updateCharacter(variables, cache, info) {\n      var _ref = variables.character,\n          id = _ref.id,\n          skillId = _ref.skillId,\n          restCharacter = _objectWithoutProperties(_ref, [\"id\", \"skillId\"]);\n\n      if (skillId) {\n        // make this better\n        var _cache$readQuery = cache.readQuery({\n          query: CharacterDocument,\n          variables: {\n            id: id\n          }\n        }),\n            character = _cache$readQuery.character;\n\n        var _ref2 = character,\n            skills = _ref2.skills;\n        var skillsData = cache.readQuery({\n          query: SkillsDocument\n        });\n        var allSkills = skillsData.skills;\n        var isMatch = skills.find(function (skill) {\n          return skill.id === skillId;\n        });\n\n        if (isMatch) {\n          return {\n            __typename: 'Character',\n            id: id,\n            skills: skills.filter(function (skill) {\n              return skill.id !== skillId;\n            })\n          };\n        } else {\n          return {\n            __typename: 'Character',\n            id: id,\n            skills: [].concat(_toConsumableArray(skills), [allSkills.find(function (skill) {\n              return skill.id === skillId;\n            })])\n          };\n        }\n      }\n\n      return _objectSpread({\n        __typename: 'Character',\n        id: id\n      }, restCharacter);\n    },\n    forgetSpell: function forgetSpell(variables, cache, _) {\n      var _ref3 = variables.character,\n          id = _ref3.id,\n          spellId = _ref3.spellId;\n\n      var _cache$readQuery2 = cache.readQuery({\n        query: CharacterDocument,\n        variables: {\n          id: id\n        }\n      }),\n          character = _cache$readQuery2.character;\n\n      var _ref4 = character,\n          spells = _ref4.spells,\n          name = _ref4.name;\n      return {\n        __typename: 'Character',\n        id: id,\n        name: name,\n        spells: spells.filter(function (spell) {\n          return spell.id !== spellId;\n        })\n      };\n    },\n    prepareSpell: function prepareSpell(variables, cache, _) {\n      var _ref5 = variables.character,\n          id = _ref5.id,\n          spellId = _ref5.spellId;\n\n      var _cache$readQuery3 = cache.readQuery({\n        query: CharacterDocument,\n        variables: {\n          id: id\n        }\n      }),\n          character = _cache$readQuery3.character;\n\n      var _ref6 = character,\n          preparedSpells = _ref6.preparedSpells,\n          name = _ref6.name;\n      return {\n        __typename: 'Character',\n        id: id,\n        name: name,\n        preparedSpells: _toConsumableArray(preparedSpells)\n      };\n    },\n    unprepareSpell: function unprepareSpell(variables, cache, _) {\n      var _ref7 = variables.character,\n          id = _ref7.id,\n          spellId = _ref7.spellId;\n\n      var _cache$readQuery4 = cache.readQuery({\n        query: CharacterDocument,\n        variables: {\n          id: id\n        }\n      }),\n          character = _cache$readQuery4.character;\n\n      var _ref8 = character,\n          preparedSpells = _ref8.preparedSpells,\n          name = _ref8.name;\n      return {\n        __typename: 'Character',\n        id: id,\n        name: name,\n        preparedSpells: preparedSpells.filter(function (spell) {\n          return spell.id !== spellId;\n        })\n      };\n    }\n  }\n});\nexport { cache as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/utils/cache.ts"],"names":["cacheExchange","CharacterDocument","SkillsDocument","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","invalidateAllCharacters","allFields","inspectFields","fieldInfos","filter","info","fieldName","forEach","fi","invalidate","arguments","updates","Mutation","createCharacter","args","deleteCharacter","__typename","id","character","optimistic","updateCharacter","variables","skillId","restCharacter","readQuery","query","skills","skillsData","allSkills","isMatch","find","skill","forgetSpell","_","spellId","spells","name","spell","prepareSpell","preparedSpells","unprepareSpell","default"],"mappings":";;;;;;;;AAAA,SAASA,aAAT,QAAiD,2BAAjD;AAEA,SACEC,iBADF,EAGEC,cAHF,QAKO,sBALP;;AAOA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAKE;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAsB,UAACI,IAAD;AAAA,WAAUF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAZ;AAAA,GAAtB,CAAP;AACD;;AAED,SAASC,uBAAT,CAAiCN,KAAjC,EAA+C;AAC7C,MAAMO,SAAS,GAAGP,KAAK,CAACQ,aAAN,CAAoB,OAApB,CAAlB;AACA,MAAMC,UAAU,GAAGF,SAAS,CAACG,MAAV,CAAiB,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,SAAL,KAAmB,YAA7B;AAAA,GAAjB,CAAnB;AACAH,EAAAA,UAAU,CAACI,OAAX,CAAmB,UAACC,EAAD,EAAQ;AACzBd,IAAAA,KAAK,CAACe,UAAN,CAAiB,OAAjB,EAA0B,YAA1B,EAAwCD,EAAE,CAACE,SAAH,IAAgB,EAAxD;AACD,GAFD;AAGD;;AAED,IAAMhB,KAAK,GAAGJ,aAAa,CAAC;AAC1BqB,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,eAAe,EAAE,yBAACjB,MAAD,EAASkB,IAAT,EAAepB,KAAf,EAAsBW,IAAtB,EAA+B;AAC9CX,QAAAA,KAAK,CAACe,UAAN,CAAiB,OAAjB,EAA0B,YAA1B;AACD,OAHO;AAIRM,MAAAA,eAAe,EAAE,yBAACnB,MAAD,EAASkB,IAAT,EAAepB,KAAf,EAAsBW,IAAtB,EAA+B;AAC9CX,QAAAA,KAAK,CAACe,UAAN,CAAiB;AACfO,UAAAA,UAAU,EAAE,WADG;AAEfC,UAAAA,EAAE,EAAGH,IAAI,CAACI,SAAN,CAAqDD;AAF1C,SAAjB;AAID;AATO;AADH,GADiB;AAc1BE,EAAAA,UAAU,EAAE;AACVC,IAAAA,eAAe,EAAE,yBAACC,SAAD,EAAY3B,KAAZ,EAAmBW,IAAnB,EAA4B;AAAA,iBACDgB,SAAS,CAACH,SADT;AAAA,UACnCD,EADmC,QACnCA,EADmC;AAAA,UAC/BK,OAD+B,QAC/BA,OAD+B;AAAA,UACnBC,aADmB;;AAG3C,UAAID,OAAJ,EAAa;AACX;AADW,+BAEW5B,KAAK,CAAC8B,SAAN,CAAgB;AACpCC,UAAAA,KAAK,EAAElC,iBAD6B;AAEpC8B,UAAAA,SAAS,EAAE;AAAEJ,YAAAA,EAAE,EAAFA;AAAF;AAFyB,SAAhB,CAFX;AAAA,YAEHC,SAFG,oBAEHA,SAFG;;AAAA,oBAOQA,SAPR;AAAA,YAOHQ,MAPG,SAOHA,MAPG;AASX,YAAMC,UAAU,GAAGjC,KAAK,CAAC8B,SAAN,CAAgB;AAAEC,UAAAA,KAAK,EAAEjC;AAAT,SAAhB,CAAnB;AAEA,YAAMoC,SAAc,GAAGD,UAAU,CAACD,MAAlC;AAEA,YAAMG,OAAO,GAAGH,MAAM,CAACI,IAAP,CAAY,UAACC,KAAD;AAAA,iBAAWA,KAAK,CAACd,EAAN,KAAaK,OAAxB;AAAA,SAAZ,CAAhB;;AAEA,YAAIO,OAAJ,EAAa;AACX,iBAAO;AACLb,YAAAA,UAAU,EAAE,WADP;AAELC,YAAAA,EAAE,EAAFA,EAFK;AAGLS,YAAAA,MAAM,EAAEA,MAAM,CAACtB,MAAP,CAAc,UAAC2B,KAAD;AAAA,qBAAWA,KAAK,CAACd,EAAN,KAAaK,OAAxB;AAAA,aAAd;AAHH,WAAP;AAKD,SAND,MAMO;AACL,iBAAO;AACLN,YAAAA,UAAU,EAAE,WADP;AAELC,YAAAA,EAAE,EAAFA,EAFK;AAGLS,YAAAA,MAAM,+BACDA,MADC,IAEJE,SAAS,CAACE,IAAV,CAAe,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACd,EAAN,KAAaK,OAAxB;AAAA,aAAf,CAFI;AAHD,WAAP;AAQD;AACF;;AAED;AACEN,QAAAA,UAAU,EAAE,WADd;AAEEC,QAAAA,EAAE,EAAFA;AAFF,SAGKM,aAHL;AAKD,KA1CS;AA2CVS,IAAAA,WAAW,EAAE,qBAACX,SAAD,EAAY3B,KAAZ,EAAmBuC,CAAnB,EAAyB;AAAA,kBACZZ,SAAS,CAACH,SADE;AAAA,UAC5BD,EAD4B,SAC5BA,EAD4B;AAAA,UACxBiB,OADwB,SACxBA,OADwB;;AAAA,8BAGdxC,KAAK,CAAC8B,SAAN,CAAgB;AACpCC,QAAAA,KAAK,EAAElC,iBAD6B;AAEpC8B,QAAAA,SAAS,EAAE;AAAEJ,UAAAA,EAAE,EAAFA;AAAF;AAFyB,OAAhB,CAHc;AAAA,UAG5BC,SAH4B,qBAG5BA,SAH4B;;AAAA,kBAQXA,SARW;AAAA,UAQ5BiB,MAR4B,SAQ5BA,MAR4B;AAAA,UAQpBC,IARoB,SAQpBA,IARoB;AAUpC,aAAO;AACLpB,QAAAA,UAAU,EAAE,WADP;AAELC,QAAAA,EAAE,EAAFA,EAFK;AAGLmB,QAAAA,IAAI,EAAJA,IAHK;AAILD,QAAAA,MAAM,EAAEA,MAAM,CAAC/B,MAAP,CAAc,UAACiC,KAAD;AAAA,iBAAWA,KAAK,CAACpB,EAAN,KAAaiB,OAAxB;AAAA,SAAd;AAJH,OAAP;AAMD,KA3DS;AA4DVI,IAAAA,YAAY,EAAE,sBAACjB,SAAD,EAAY3B,KAAZ,EAAmBuC,CAAnB,EAAyB;AAAA,kBACbZ,SAAS,CAACH,SADG;AAAA,UAC7BD,EAD6B,SAC7BA,EAD6B;AAAA,UACzBiB,OADyB,SACzBA,OADyB;;AAAA,8BAGfxC,KAAK,CAAC8B,SAAN,CAAgB;AACpCC,QAAAA,KAAK,EAAElC,iBAD6B;AAEpC8B,QAAAA,SAAS,EAAE;AAAEJ,UAAAA,EAAE,EAAFA;AAAF;AAFyB,OAAhB,CAHe;AAAA,UAG7BC,SAH6B,qBAG7BA,SAH6B;;AAAA,kBAQJA,SARI;AAAA,UAQ7BqB,cAR6B,SAQ7BA,cAR6B;AAAA,UAQbH,IARa,SAQbA,IARa;AAUrC,aAAO;AACLpB,QAAAA,UAAU,EAAE,WADP;AAELC,QAAAA,EAAE,EAAFA,EAFK;AAGLmB,QAAAA,IAAI,EAAJA,IAHK;AAILG,QAAAA,cAAc,qBAAMA,cAAN;AAJT,OAAP;AAMD,KA5ES;AA6EVC,IAAAA,cAAc,EAAE,wBAACnB,SAAD,EAAY3B,KAAZ,EAAmBuC,CAAnB,EAAyB;AAAA,kBACfZ,SAAS,CAACH,SADK;AAAA,UAC/BD,EAD+B,SAC/BA,EAD+B;AAAA,UAC3BiB,OAD2B,SAC3BA,OAD2B;;AAAA,8BAGjBxC,KAAK,CAAC8B,SAAN,CAAgB;AACpCC,QAAAA,KAAK,EAAElC,iBAD6B;AAEpC8B,QAAAA,SAAS,EAAE;AAAEJ,UAAAA,EAAE,EAAFA;AAAF;AAFyB,OAAhB,CAHiB;AAAA,UAG/BC,SAH+B,qBAG/BA,SAH+B;;AAAA,kBAQNA,SARM;AAAA,UAQ/BqB,cAR+B,SAQ/BA,cAR+B;AAAA,UAQfH,IARe,SAQfA,IARe;AAUvC,aAAO;AACLpB,QAAAA,UAAU,EAAE,WADP;AAELC,QAAAA,EAAE,EAAFA,EAFK;AAGLmB,QAAAA,IAAI,EAAJA,IAHK;AAILG,QAAAA,cAAc,EAAEA,cAAc,CAACnC,MAAf,CAAsB,UAACiC,KAAD;AAAA,iBAAWA,KAAK,CAACpB,EAAN,KAAaiB,OAAxB;AAAA,SAAtB;AAJX,OAAP;AAMD;AA7FS;AAdc,CAAD,CAA3B;AA+GA,SAASxC,KAAK,IAAI+C,OAAlB","sourcesContent":["import { cacheExchange, QueryInput, Cache } from '@urql/exchange-graphcache'\n\nimport {\n  CharacterDocument,\n  DeleteCharacterMutationVariables,\n  SkillsDocument,\n  SpellDocument,\n} from '../generated/graphql'\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query,\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any)\n}\n\nfunction invalidateAllCharacters(cache: Cache) {\n  const allFields = cache.inspectFields('Query')\n  const fieldInfos = allFields.filter((info) => info.fieldName === 'characters')\n  fieldInfos.forEach((fi) => {\n    cache.invalidate('Query', 'characters', fi.arguments || {})\n  })\n}\n\nconst cache = cacheExchange({\n  updates: {\n    Mutation: {\n      createCharacter: (result, args, cache, info) => {\n        cache.invalidate('Query', 'characters')\n      },\n      deleteCharacter: (result, args, cache, info) => {\n        cache.invalidate({\n          __typename: 'Character',\n          id: (args.character as DeleteCharacterMutationVariables).id,\n        })\n      },\n    },\n  },\n  optimistic: {\n    updateCharacter: (variables, cache, info) => {\n      const { id, skillId, ...restCharacter } = variables.character as any\n\n      if (skillId) {\n        // make this better\n        const { character } = cache.readQuery({\n          query: CharacterDocument,\n          variables: { id },\n        })\n\n        const { skills } = character as any\n\n        const skillsData = cache.readQuery({ query: SkillsDocument })\n\n        const allSkills: any = skillsData.skills\n\n        const isMatch = skills.find((skill) => skill.id === skillId)\n\n        if (isMatch) {\n          return {\n            __typename: 'Character',\n            id,\n            skills: skills.filter((skill) => skill.id !== skillId),\n          }\n        } else {\n          return {\n            __typename: 'Character',\n            id,\n            skills: [\n              ...skills,\n              allSkills.find((skill) => skill.id === skillId),\n            ],\n          }\n        }\n      }\n\n      return {\n        __typename: 'Character',\n        id,\n        ...restCharacter,\n      }\n    },\n    forgetSpell: (variables, cache, _) => {\n      const { id, spellId } = variables.character as any\n\n      const { character } = cache.readQuery({\n        query: CharacterDocument,\n        variables: { id },\n      })\n\n      const { spells, name } = character as any\n\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        spells: spells.filter((spell) => spell.id !== spellId),\n      }\n    },\n    prepareSpell: (variables, cache, _) => {\n      const { id, spellId } = variables.character as any\n\n      const { character } = cache.readQuery({\n        query: CharacterDocument,\n        variables: { id },\n      })\n\n      const { preparedSpells, name } = character as any\n\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        preparedSpells: [...preparedSpells],\n      }\n    },\n    unprepareSpell: (variables, cache, _) => {\n      const { id, spellId } = variables.character as any\n\n      const { character } = cache.readQuery({\n        query: CharacterDocument,\n        variables: { id },\n      })\n\n      const { preparedSpells, name } = character as any\n\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        preparedSpells: preparedSpells.filter((spell) => spell.id !== spellId),\n      }\n    },\n  },\n})\n\nexport { cache as default }\n"]},"metadata":{},"sourceType":"module"}