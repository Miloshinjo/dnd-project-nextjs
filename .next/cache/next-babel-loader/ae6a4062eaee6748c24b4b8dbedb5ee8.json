{"ast":null,"code":"var _jsxFileName = \"/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-spells/spells-known/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useMemo, useState } from 'react';\nimport Link from 'next/link';\nimport { IoMdClose } from 'react-icons/io';\nimport { arrangeSpellsByLevel } from '../../../../../utils/spells';\nimport { useForgetSpellMutation, usePrepareSpellMutation } from '../../../../../generated/graphql';\nimport { useModal } from '../../../../../context/modal';\nimport styles from './styles.module.css';\n\nconst SpellsKnown = ({\n  spells,\n  characterId,\n  title,\n  learnControls = true,\n  spellsPreparedIds = [],\n  spellsPrepareMode = false\n}) => {\n  const {\n    openModal\n  } = useModal();\n  const {\n    0: deleteSpells,\n    1: setDeleteSpells\n  } = useState(false);\n  const [, forgetSpell] = useForgetSpellMutation();\n  const [, prepareSpell] = usePrepareSpellMutation();\n\n  const handleForgetSpell = async spellId => {\n    const result = await forgetSpell({\n      id: characterId,\n      spellId\n    });\n\n    if (result.error) {\n      console.log(result.error);\n    }\n  };\n\n  const handlePrepareSpell = async spellId => {\n    const result = await prepareSpell({\n      id: characterId,\n      spellId\n    });\n\n    if (result.error) {\n      console.log(result.error);\n    }\n  };\n\n  const spellsByLevel = useMemo(() => arrangeSpellsByLevel(spells), [spells]);\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"flex items-center px-4 justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    className: \"text-center text-sm font-medium text-gray-600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, title), learnControls && __jsx(\"div\", {\n    className: \"flex items-end flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    href: \"/spells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    className: styles.learnSpellsButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, \"Learn Spells\")), __jsx(\"button\", {\n    className: styles.learnSpellsButton,\n    onClick: () => {\n      setDeleteSpells(!deleteSpells);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"Forget Spells\"))), __jsx(\"div\", {\n    className: \"px-4 mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, Object.keys(spellsByLevel).map(level => {\n    return __jsx(\"div\", {\n      key: level,\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, __jsx(\"h4\", {\n      className: \"text-xs font-medium text-gray-600 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, level === '0' ? 'Cantrips' : `Level ${level}`), spellsByLevel[level].map(spell => {\n      return __jsx(\"div\", {\n        key: spell.id,\n        className: \"mb-2 flex items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 23\n        }\n      }, __jsx(\"button\", {\n        type: \"button\",\n        onClick: () => openModal({\n          type: 'spell',\n          props: {\n            spellId: spell.id,\n            spellName: spell.name\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }\n      }, spell.name), spell.concentration && __jsx(\"span\", {\n        className: \"ml-2 px-1 bg-gray-300 uppercase rounded text-xs font-semibold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 27\n        }\n      }, \"c\"), spell.ritual && __jsx(\"span\", {\n        className: \"ml-2 px-1 bg-gray-300 uppercase rounded text-xs font-semibold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 27\n        }\n      }, \"r\")), spellsPrepareMode && spell.level !== 0 && !spellsPreparedIds.includes(spell.id) && __jsx(\"button\", {\n        type: \"button\",\n        className: \"text-gray-600 ml-auto text-xs\",\n        onClick: () => {\n          handlePrepareSpell(spell.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 27\n        }\n      }, \"Prepare\"), deleteSpells && __jsx(\"button\", {\n        type: \"button\",\n        className: \"text-gray-600 ml-auto\",\n        onClick: () => {\n          handleForgetSpell(spell.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }\n      }, __jsx(IoMdClose, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 27\n        }\n      })));\n    }));\n  }))));\n};\n\nexport { SpellsKnown as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-spells/spells-known/index.tsx"],"names":["useMemo","useState","Link","IoMdClose","arrangeSpellsByLevel","useForgetSpellMutation","usePrepareSpellMutation","useModal","styles","SpellsKnown","spells","characterId","title","learnControls","spellsPreparedIds","spellsPrepareMode","openModal","deleteSpells","setDeleteSpells","forgetSpell","prepareSpell","handleForgetSpell","spellId","result","id","error","console","log","handlePrepareSpell","spellsByLevel","container","learnSpellsButton","Object","keys","map","level","spell","type","props","spellName","name","concentration","ritual","includes","default"],"mappings":"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","sourcesContent":["import { useMemo, useState } from 'react'\nimport Link from 'next/link'\nimport { IoMdClose } from 'react-icons/io'\nimport { GiRead } from 'react-icons/gi'\n\nimport { CharacterUI } from '../../../../../models/character'\nimport { Spell } from '../../../../../generated/graphql'\nimport { arrangeSpellsByLevel } from '../../../../../utils/spells'\nimport {\n  useForgetSpellMutation,\n  usePrepareSpellMutation,\n} from '../../../../../generated/graphql'\nimport { useModal } from '../../../../../context/modal'\nimport styles from './styles.module.css'\n\ntype Props = {\n  spells: CharacterUI['spells']\n  characterId: CharacterUI['id']\n  title: string\n  learnControls?: boolean\n  spellsPreparedIds?: Array<CharacterUI['id']>\n  spellsPrepareMode?: boolean\n}\n\nconst SpellsKnown: React.FC<Props> = ({\n  spells,\n  characterId,\n  title,\n  learnControls = true,\n  spellsPreparedIds = [],\n  spellsPrepareMode = false,\n}) => {\n  const { openModal } = useModal()\n\n  const [deleteSpells, setDeleteSpells] = useState<boolean>(false)\n\n  const [, forgetSpell] = useForgetSpellMutation()\n  const [, prepareSpell] = usePrepareSpellMutation()\n\n  const handleForgetSpell = async (spellId: Spell['id']): Promise<void> => {\n    const result = await forgetSpell({ id: characterId, spellId })\n\n    if (result.error) {\n      console.log(result.error)\n    }\n  }\n\n  const handlePrepareSpell = async (spellId: Spell['id']): Promise<void> => {\n    const result = await prepareSpell({ id: characterId, spellId })\n\n    if (result.error) {\n      console.log(result.error)\n    }\n  }\n\n  const spellsByLevel = useMemo(() => arrangeSpellsByLevel(spells), [spells])\n\n  return (\n    <div className={styles.container}>\n      <div className=\"p-2\">\n        <div className=\"flex items-center px-4 justify-between\">\n          <h4 className=\"text-center text-sm font-medium text-gray-600\">\n            {title}\n          </h4>\n          {learnControls && (\n            <div className=\"flex items-end flex-col\">\n              <Link href=\"/spells\">\n                <button className={styles.learnSpellsButton}>\n                  Learn Spells\n                </button>\n              </Link>\n\n              <button\n                className={styles.learnSpellsButton}\n                onClick={() => {\n                  setDeleteSpells(!deleteSpells)\n                }}\n              >\n                Forget Spells\n              </button>\n            </div>\n          )}\n        </div>\n        <div className=\"px-4 mt-4\">\n          {Object.keys(spellsByLevel).map((level: string) => {\n            return (\n              <div key={level} className=\"mb-4\">\n                <h4 className=\"text-xs font-medium text-gray-600 mb-2\">\n                  {level === '0' ? 'Cantrips' : `Level ${level}`}\n                </h4>\n\n                {spellsByLevel[level].map((spell) => {\n                  return (\n                    <div key={spell.id} className=\"mb-2 flex items-center\">\n                      <div>\n                        <button\n                          type=\"button\"\n                          onClick={() =>\n                            openModal({\n                              type: 'spell',\n                              props: {\n                                spellId: spell.id,\n                                spellName: spell.name,\n                              },\n                            })\n                          }\n                        >\n                          {spell.name}\n                        </button>\n                        {spell.concentration && (\n                          <span className=\"ml-2 px-1 bg-gray-300 uppercase rounded text-xs font-semibold\">\n                            c\n                          </span>\n                        )}\n                        {spell.ritual && (\n                          <span className=\"ml-2 px-1 bg-gray-300 uppercase rounded text-xs font-semibold\">\n                            r\n                          </span>\n                        )}\n                      </div>\n                      {spellsPrepareMode &&\n                        spell.level !== 0 &&\n                        !spellsPreparedIds.includes(spell.id) && (\n                          <button\n                            type=\"button\"\n                            className=\"text-gray-600 ml-auto text-xs\"\n                            onClick={() => {\n                              handlePrepareSpell(spell.id)\n                            }}\n                          >\n                            Prepare\n                          </button>\n                        )}\n                      {deleteSpells && (\n                        <button\n                          type=\"button\"\n                          className=\"text-gray-600 ml-auto\"\n                          onClick={() => {\n                            handleForgetSpell(spell.id)\n                          }}\n                        >\n                          <IoMdClose />\n                        </button>\n                      )}\n                    </div>\n                  )\n                })}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { SpellsKnown as default }\n"]},"metadata":{},"sourceType":"module"}