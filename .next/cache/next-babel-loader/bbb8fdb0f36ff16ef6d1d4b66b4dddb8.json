{"ast":null,"code":"import { rule } from 'graphql-shield';\nimport { handleError } from '../utils/helpers';\nimport errors from '../utils/errors';\nconst rules = {\n  isAuthenticatedUser: rule({\n    cache: 'contextual'\n  })((_parent, _args, {\n    userId\n  }) => {\n    try {\n      if (!userId) {\n        return handleError(errors.notAuthenticated);\n      }\n\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }),\n  isCharacterOwner: rule({\n    cache: 'contextual'\n  })(async (_parent, {\n    character\n  }, {\n    prisma,\n    userId\n  }) => {\n    try {\n      const user = await prisma.character.findOne({\n        where: {\n          id: character.id\n        }\n      }).user();\n      return userId === (user === null || user === void 0 ? void 0 : user.id);\n    } catch (e) {\n      return e;\n    }\n  })\n};\nexport { rules as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/server/permissions/rules.ts"],"names":["rule","handleError","errors","rules","isAuthenticatedUser","cache","_parent","_args","userId","notAuthenticated","e","isCharacterOwner","character","prisma","user","findOne","where","id","default"],"mappings":"AAAA,SAASA,IAAT,QAAqB,gBAArB;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,mBAAmB,EAAEJ,IAAI,CAAC;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAJ,CACnB,CAACC,OAAD,EAAUC,KAAV,EAAiB;AAAEC,IAAAA;AAAF,GAAjB,KAAgC;AAC9B,QAAI;AACF,UAAI,CAACA,MAAL,EAAa;AACX,eAAOP,WAAW,CAACC,MAAM,CAACO,gBAAR,CAAlB;AACD;;AACD,aAAO,IAAP;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACV,aAAOA,CAAP;AACD;AACF,GAVkB,CADT;AAaZC,EAAAA,gBAAgB,EAAEX,IAAI,CAAC;AACrBK,IAAAA,KAAK,EAAE;AADc,GAAD,CAAJ,CAEf,OAAOC,OAAP,EAAgB;AAAEM,IAAAA;AAAF,GAAhB,EAA+B;AAAEC,IAAAA,MAAF;AAAUL,IAAAA;AAAV,GAA/B,KAAsD;AACvD,QAAI;AACF,YAAMM,IAAI,GAAG,MAAMD,MAAM,CAACD,SAAP,CAChBG,OADgB,CACR;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,EAAE,EAAEL,SAAS,CAACK;AADT;AADA,OADQ,EAMhBH,IANgB,EAAnB;AAQA,aAAON,MAAM,MAAKM,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEG,EAAX,CAAb;AACD,KAVD,CAUE,OAAOP,CAAP,EAAU;AACV,aAAOA,CAAP;AACD;AACF,GAhBiB;AAbN,CAAd;AAgCA,SAASP,KAAK,IAAIe,OAAlB","sourcesContent":["import { rule } from 'graphql-shield'\n\nimport { handleError } from '../utils/helpers'\nimport errors from '../utils/errors'\n\nconst rules = {\n  isAuthenticatedUser: rule({ cache: 'contextual' })(\n    (_parent, _args, { userId }) => {\n      try {\n        if (!userId) {\n          return handleError(errors.notAuthenticated)\n        }\n        return true\n      } catch (e) {\n        return e\n      }\n    }\n  ),\n  isCharacterOwner: rule({\n    cache: 'contextual',\n  })(async (_parent, { character }, { prisma, userId }) => {\n    try {\n      const user = await prisma.character\n        .findOne({\n          where: {\n            id: character.id,\n          },\n        })\n        .user()\n\n      return userId === user?.id\n    } catch (e) {\n      return e\n    }\n  }),\n}\n\nexport { rules as default }\n"]},"metadata":{},"sourceType":"module"}