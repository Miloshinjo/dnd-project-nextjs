{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nvar ClientOnlyPortal = function ClientOnlyPortal(_ref) {\n  _s();\n\n  var children = _ref.children,\n      selector = _ref.selector;\n  var ref = useRef();\n\n  var _useState = useState(false),\n      mounted = _useState[0],\n      setMounted = _useState[1];\n\n  useEffect(function () {\n    ref.current = document.querySelector(selector);\n    setMounted(true);\n  }, [selector]);\n  return mounted ? /*#__PURE__*/createPortal(children, ref.current) : null;\n};\n\n_s(ClientOnlyPortal, \"FhWHR0PVnhvGzQxD+Cw8mCPL9WU=\");\n\n_c = ClientOnlyPortal;\nexport { ClientOnlyPortal as default };\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientOnlyPortal\");","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/utils/clientOnlyPortal.ts"],"names":["useRef","useEffect","useState","createPortal","ClientOnlyPortal","children","selector","ref","mounted","setMounted","current","document","querySelector","default"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,YAAT,QAA6B,WAA7B;;AAMA,IAAMC,gBAAiC,GAAG,SAApCA,gBAAoC,OAA4B;AAAA;;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACpE,MAAMC,GAAG,GAAGP,MAAM,EAAlB;;AADoE,kBAEtCE,QAAQ,CAAC,KAAD,CAF8B;AAAA,MAE7DM,OAF6D;AAAA,MAEpDC,UAFoD;;AAIpER,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,GAAG,CAACG,OAAJ,GAAcC,QAAQ,CAACC,aAAT,CAAuBN,QAAvB,CAAd;AACAG,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAHQ,EAGN,CAACH,QAAD,CAHM,CAAT;AAKA,SAAOE,OAAO,gBAAGL,YAAY,CAACE,QAAD,EAAWE,GAAG,CAACG,OAAf,CAAf,GAAyC,IAAvD;AACD,CAVD;;GAAMN,gB;;KAAAA,gB;AAYN,SAASA,gBAAgB,IAAIS,OAA7B","sourcesContent":["import { useRef, useEffect, useState } from 'react'\nimport { createPortal } from 'react-dom'\n\ntype Props = {\n  selector: any\n}\n\nconst ClientOnlyPortal: React.FC<Props> = ({ children, selector }) => {\n  const ref = useRef() as React.MutableRefObject<HTMLElement>\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    ref.current = document.querySelector(selector)\n    setMounted(true)\n  }, [selector])\n\n  return mounted ? createPortal(children, ref.current) : null\n}\n\nexport { ClientOnlyPortal as default }\n"]},"metadata":{},"sourceType":"module"}