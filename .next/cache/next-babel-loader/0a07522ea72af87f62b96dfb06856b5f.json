{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-spells/spells-prepared/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { IoMdClose } from 'react-icons/io';\nimport { useUnprepareSpellMutation } from '../../../../../generated/graphql';\nimport { useModal } from '../../../../../context/modal';\nimport styles from './styles.module.css';\n\nvar SpellsPrepared = function SpellsPrepared(_ref) {\n  _s();\n\n  var characterId = _ref.characterId,\n      spells = _ref.spells,\n      spellsPrepareMode = _ref.spellsPrepareMode,\n      setSpellsPrepareMode = _ref.setSpellsPrepareMode,\n      numberOfSpellsPrepared = _ref.numberOfSpellsPrepared;\n\n  var _useModal = useModal(),\n      openModal = _useModal.openModal;\n\n  var _useUnprepareSpellMut = useUnprepareSpellMutation(),\n      _useUnprepareSpellMut2 = _slicedToArray(_useUnprepareSpellMut, 2),\n      unprepareSpell = _useUnprepareSpellMut2[1];\n\n  var handleUnprepareSpell = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(spellId) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return unprepareSpell({\n                id: characterId,\n                spellId: spellId\n              });\n\n            case 2:\n              result = _context.sent;\n\n              if (result.error) {\n                console.log(result.error);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUnprepareSpell(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"p-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"flex items-center px-4 justify-between mb-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    className: \"text-center text-sm font-medium text-gray-600\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, \"Spells prepared\", __jsx(\"span\", {\n    className: \"text-xs ml-1 text-gray-500\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"(\", spells.length, \" of \", numberOfSpellsPrepared, \")\")), __jsx(\"button\", {\n    className: styles.prepareSpellsButton,\n    onClick: function onClick() {\n      return setSpellsPrepareMode(!spellsPrepareMode);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"Prepare Spells\")), __jsx(\"div\", {\n    className: \"px-4 flex flex-wrap\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, spells.length ? spells.map(function (spell) {\n    return __jsx(\"div\", {\n      className: \"flex items-center mr-2 mb-2\",\n      key: spell.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, __jsx(\"button\", {\n      type: \"button\",\n      className: \"px-2 text-sm bg-white shadow-inner border\",\n      onClick: function onClick() {\n        return openModal({\n          type: 'spell',\n          props: {\n            spellId: spell.id,\n            spellName: spell.name\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }, spell.name), spellsPrepareMode && __jsx(\"button\", {\n      type: \"button\",\n      className: \"ml-1\",\n      onClick: function onClick() {\n        return handleUnprepareSpell(spell.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, __jsx(IoMdClose, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 23\n      }\n    })));\n  }) : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"No spells prepared\"))));\n};\n\n_s(SpellsPrepared, \"GAQudItxAv1KdAwmH/t/iSrlG9c=\", false, function () {\n  return [useModal, useUnprepareSpellMutation];\n});\n\n_c = SpellsPrepared;\nexport { SpellsPrepared as default };\n\nvar _c;\n\n$RefreshReg$(_c, \"SpellsPrepared\");","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-spells/spells-prepared/index.tsx"],"names":["IoMdClose","useUnprepareSpellMutation","useModal","styles","SpellsPrepared","characterId","spells","spellsPrepareMode","setSpellsPrepareMode","numberOfSpellsPrepared","openModal","unprepareSpell","handleUnprepareSpell","spellId","id","result","error","console","log","container","length","prepareSpellsButton","map","spell","type","props","spellName","name","default"],"mappings":";;;;;;;;;;AACA,SAASA,SAAT,QAA0B,gBAA1B;AAIA,SACEC,yBADF,QAGO,kCAHP;AAIA,SAASC,QAAT,QAAyB,8BAAzB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;AAUA,IAAMC,cAA+B,GAAG,SAAlCA,cAAkC,OAMlC;AAAA;;AAAA,MALJC,WAKI,QALJA,WAKI;AAAA,MAJJC,MAII,QAJJA,MAII;AAAA,MAHJC,iBAGI,QAHJA,iBAGI;AAAA,MAFJC,oBAEI,QAFJA,oBAEI;AAAA,MADJC,sBACI,QADJA,sBACI;;AAAA,kBACkBP,QAAQ,EAD1B;AAAA,MACIQ,SADJ,aACIA,SADJ;;AAAA,8BAGuBT,yBAAyB,EAHhD;AAAA;AAAA,MAGKU,cAHL;;AAKJ,MAAMC,oBAAoB;AAAA,yEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACNF,cAAc,CAAC;AAAEG,gBAAAA,EAAE,EAAET,WAAN;AAAmBQ,gBAAAA,OAAO,EAAPA;AAAnB,eAAD,CADR;;AAAA;AACrBE,cAAAA,MADqB;;AAG3B,kBAAIA,MAAM,CAACC,KAAX,EAAkB;AAChBC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,KAAnB;AACD;;AAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAApBJ,oBAAoB;AAAA;AAAA;AAAA,KAA1B;;AAQA,SACE;AAAK,IAAA,SAAS,EAAET,MAAM,CAACgB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,6CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,+CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEE;AAAM,IAAA,SAAS,EAAC,4BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACIb,MAAM,CAACc,MADX,UACuBX,sBADvB,MAFF,CADF,EAOE;AACE,IAAA,SAAS,EAAEN,MAAM,CAACkB,mBADpB;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMb,oBAAoB,CAAC,CAACD,iBAAF,CAA1B;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CADF,EAeE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,MAAM,CAACc,MAAP,GACCd,MAAM,CAACgB,GAAP,CAAW,UAACC,KAAD,EAAW;AACpB,WACE;AAAK,MAAA,SAAS,EAAC,6BAAf;AAA6C,MAAA,GAAG,EAAEA,KAAK,CAACT,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,2CAFZ;AAGE,MAAA,OAAO,EAAE;AAAA,eACPJ,SAAS,CAAC;AACRc,UAAAA,IAAI,EAAE,OADE;AAERC,UAAAA,KAAK,EAAE;AACLZ,YAAAA,OAAO,EAAEU,KAAK,CAACT,EADV;AAELY,YAAAA,SAAS,EAAEH,KAAK,CAACI;AAFZ;AAFC,SAAD,CADF;AAAA,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaGJ,KAAK,CAACI,IAbT,CADF,EAgBGpB,iBAAiB,IAChB;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMK,oBAAoB,CAACW,KAAK,CAACT,EAAP,CAA1B;AAAA,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAjBJ,CADF;AA4BD,GA7BD,CADD,GAgCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAjCJ,CAfF,CADF,CADF;AAwDD,CA3ED;;GAAMV,c;UAOkBF,Q,EAEKD,yB;;;KATvBG,c;AA6EN,SAASA,cAAc,IAAIwB,OAA3B","sourcesContent":["import { Dispatch, SetStateAction } from 'react'\nimport { IoMdClose } from 'react-icons/io'\n\nimport { CharacterUI } from '../../../../../models/character'\n\nimport {\n  useUnprepareSpellMutation,\n  Spell,\n} from '../../../../../generated/graphql'\nimport { useModal } from '../../../../../context/modal'\n\nimport styles from './styles.module.css'\n\ntype Props = {\n  characterId: CharacterUI['id']\n  spells: CharacterUI['spells']\n  spellsPrepareMode: boolean\n  setSpellsPrepareMode: Dispatch<SetStateAction<boolean>>\n  numberOfSpellsPrepared: number\n}\n\nconst SpellsPrepared: React.FC<Props> = ({\n  characterId,\n  spells,\n  spellsPrepareMode,\n  setSpellsPrepareMode,\n  numberOfSpellsPrepared,\n}) => {\n  const { openModal } = useModal()\n\n  const [, unprepareSpell] = useUnprepareSpellMutation()\n\n  const handleUnprepareSpell = async (spellId: Spell['id']): Promise<void> => {\n    const result = await unprepareSpell({ id: characterId, spellId })\n\n    if (result.error) {\n      console.log(result.error)\n    }\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className=\"p-2\">\n        <div className=\"flex items-center px-4 justify-between mb-4\">\n          <h4 className=\"text-center text-sm font-medium text-gray-600\">\n            Spells prepared\n            <span className=\"text-xs ml-1 text-gray-500\">\n              ({spells.length} of {numberOfSpellsPrepared})\n            </span>\n          </h4>\n          <button\n            className={styles.prepareSpellsButton}\n            onClick={() => setSpellsPrepareMode(!spellsPrepareMode)}\n          >\n            Prepare Spells\n          </button>\n        </div>\n        <div className=\"px-4 flex flex-wrap\">\n          {spells.length ? (\n            spells.map((spell) => {\n              return (\n                <div className=\"flex items-center mr-2 mb-2\" key={spell.id}>\n                  <button\n                    type=\"button\"\n                    className=\"px-2 text-sm bg-white shadow-inner border\"\n                    onClick={() =>\n                      openModal({\n                        type: 'spell',\n                        props: {\n                          spellId: spell.id,\n                          spellName: spell.name,\n                        },\n                      })\n                    }\n                  >\n                    {spell.name}\n                  </button>\n                  {spellsPrepareMode && (\n                    <button\n                      type=\"button\"\n                      className=\"ml-1\"\n                      onClick={() => handleUnprepareSpell(spell.id)}\n                    >\n                      <IoMdClose />\n                    </button>\n                  )}\n                </div>\n              )\n            })\n          ) : (\n            <div>No spells prepared</div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { SpellsPrepared as default }\n"]},"metadata":{},"sourceType":"module"}