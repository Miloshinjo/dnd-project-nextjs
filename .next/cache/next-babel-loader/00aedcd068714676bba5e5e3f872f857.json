{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const AddSubclassDocument = gql`\n    mutation AddSubclass($id: ID!, $subclassId: ID!) {\n  addSubclass(character: {id: $id, subclassId: $subclassId}) {\n    id\n    subclass {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useAddSubclassMutation() {\n  return Urql.useMutation(AddSubclassDocument);\n}\n;\nexport const ArmorClassDocument = gql`\n    mutation ArmorClass($id: ID!, $armorClass: Int!) {\n  updateCharacter(character: {id: $id, armorClass: $armorClass}) {\n    id\n    armorClass\n  }\n}\n    `;\nexport function useArmorClassMutation() {\n  return Urql.useMutation(ArmorClassDocument);\n}\n;\nexport const CharismaDocument = gql`\n    mutation Charisma($id: ID!, $charisma: Int!) {\n  updateCharacter(character: {id: $id, charisma: $charisma}) {\n    id\n    charisma\n  }\n}\n    `;\nexport function useCharismaMutation() {\n  return Urql.useMutation(CharismaDocument);\n}\n;\nexport const ConstitutionDocument = gql`\n    mutation Constitution($id: ID!, $constitution: Int!) {\n  updateCharacter(character: {id: $id, constitution: $constitution}) {\n    id\n    constitution\n  }\n}\n    `;\nexport function useConstitutionMutation() {\n  return Urql.useMutation(ConstitutionDocument);\n}\n;\nexport const CreateCharacterDocument = gql`\n    mutation CreateCharacter($name: String!, $race: String!, $alignment: String!, $klassId: ID!) {\n  createCharacter(character: {name: $name, race: $race, alignment: $alignment, klassId: $klassId}) {\n    id\n    name\n    race\n    alignment\n    klass {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useCreateCharacterMutation() {\n  return Urql.useMutation(CreateCharacterDocument);\n}\n;\nexport const DeleteCharacterDocument = gql`\n    mutation DeleteCharacter($id: ID!) {\n  deleteCharacter(character: {id: $id}) {\n    id\n    name\n  }\n}\n    `;\nexport function useDeleteCharacterMutation() {\n  return Urql.useMutation(DeleteCharacterDocument);\n}\n;\nexport const DexterityDocument = gql`\n    mutation Dexterity($id: ID!, $dexterity: Int!) {\n  updateCharacter(character: {id: $id, dexterity: $dexterity}) {\n    id\n    dexterity\n  }\n}\n    `;\nexport function useDexterityMutation() {\n  return Urql.useMutation(DexterityDocument);\n}\n;\nexport const ForgetSpellDocument = gql`\n    mutation ForgetSpell($id: ID!, $spellId: ID!) {\n  forgetSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    spells {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useForgetSpellMutation() {\n  return Urql.useMutation(ForgetSpellDocument);\n}\n;\nexport const HitPointsDocument = gql`\n    mutation HitPoints($id: ID!, $hitPoints: Int!) {\n  updateCharacter(character: {id: $id, hitPoints: $hitPoints}) {\n    id\n    hitPoints\n  }\n}\n    `;\nexport function useHitPointsMutation() {\n  return Urql.useMutation(HitPointsDocument);\n}\n;\nexport const IntelligenceDocument = gql`\n    mutation Intelligence($id: ID!, $intelligence: Int!) {\n  updateCharacter(character: {id: $id, intelligence: $intelligence}) {\n    id\n    intelligence\n  }\n}\n    `;\nexport function useIntelligenceMutation() {\n  return Urql.useMutation(IntelligenceDocument);\n}\n;\nexport const LearnSpellDocument = gql`\n    mutation LearnSpell($id: ID!, $spellId: ID!) {\n  learnSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    spells {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useLearnSpellMutation() {\n  return Urql.useMutation(LearnSpellDocument);\n}\n;\nexport const LevelDocument = gql`\n    mutation Level($id: ID!, $level: Int!) {\n  updateCharacter(character: {id: $id, level: $level}) {\n    id\n    level\n  }\n}\n    `;\nexport function useLevelMutation() {\n  return Urql.useMutation(LevelDocument);\n}\n;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    user {\n      username\n    }\n    token\n  }\n}\n    `;\nexport function useLoginMutation() {\n  return Urql.useMutation(LoginDocument);\n}\n;\nexport const MaxHitPointsDocument = gql`\n    mutation MaxHitPoints($id: ID!, $maxHitPoints: Int!) {\n  updateCharacter(character: {id: $id, maxHitPoints: $maxHitPoints}) {\n    id\n    maxHitPoints\n  }\n}\n    `;\nexport function useMaxHitPointsMutation() {\n  return Urql.useMutation(MaxHitPointsDocument);\n}\n;\nexport const PrepareSpellDocument = gql`\n    mutation PrepareSpell($id: ID!, $spellId: ID!) {\n  prepareSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    preparedSpells {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function usePrepareSpellMutation() {\n  return Urql.useMutation(PrepareSpellDocument);\n}\n;\nexport const SignupDocument = gql`\n    mutation Signup($email: String!, $password: String!, $passwordConfirm: String!, $username: String!) {\n  signup(user: {email: $email, password: $password, passwordConfirm: $passwordConfirm, username: $username}) {\n    user {\n      username\n    }\n    token\n  }\n}\n    `;\nexport function useSignupMutation() {\n  return Urql.useMutation(SignupDocument);\n}\n;\nexport const SkillDocument = gql`\n    mutation Skill($id: ID!, $skillId: ID!) {\n  updateCharacter(character: {id: $id, skillId: $skillId}) {\n    id\n    skills {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useSkillMutation() {\n  return Urql.useMutation(SkillDocument);\n}\n;\nexport const SpeedDocument = gql`\n    mutation Speed($id: ID!, $speed: Int!) {\n  updateCharacter(character: {id: $id, speed: $speed}) {\n    id\n    speed\n  }\n}\n    `;\nexport function useSpeedMutation() {\n  return Urql.useMutation(SpeedDocument);\n}\n;\nexport const SpellSlotsDocument = gql`\n    mutation SpellSlots($id: ID!, $spellSlots: String!) {\n  updateCharacter(character: {id: $id, spellSlots: $spellSlots}) {\n    id\n    spellSlots\n  }\n}\n    `;\nexport function useSpellSlotsMutation() {\n  return Urql.useMutation(SpellSlotsDocument);\n}\n;\nexport const StrengthDocument = gql`\n    mutation Strength($id: ID!, $strength: Int!) {\n  updateCharacter(character: {id: $id, strength: $strength}) {\n    id\n    strength\n  }\n}\n    `;\nexport function useStrengthMutation() {\n  return Urql.useMutation(StrengthDocument);\n}\n;\nexport const UnprepareSpellDocument = gql`\n    mutation UnprepareSpell($id: ID!, $spellId: ID!) {\n  unprepareSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    preparedSpells {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useUnprepareSpellMutation() {\n  return Urql.useMutation(UnprepareSpellDocument);\n}\n;\nexport const WisdomDocument = gql`\n    mutation Wisdom($id: ID!, $wisdom: Int!) {\n  updateCharacter(character: {id: $id, wisdom: $wisdom}) {\n    id\n    wisdom\n  }\n}\n    `;\nexport function useWisdomMutation() {\n  return Urql.useMutation(WisdomDocument);\n}\n;\nexport const CharacterDocument = gql`\n    query Character($id: ID!) {\n  character(id: $id) {\n    id\n    name\n    level\n    race\n    hitPoints\n    maxHitPoints\n    armorClass\n    gold\n    alignment\n    inspiration\n    strength\n    dexterity\n    constitution\n    intelligence\n    wisdom\n    charisma\n    speed\n    spellSlots\n    klass {\n      id\n      name\n      hitDie\n      spellCastingModifier\n    }\n    subclass {\n      id\n      name\n      spellCastingModifier\n    }\n    skills {\n      id\n      name\n      ability\n    }\n    spells {\n      id\n      name\n      level\n      concentration\n      ritual\n    }\n    preparedSpells {\n      id\n      name\n      level\n      concentration\n      ritual\n    }\n  }\n}\n    `;\nexport function useCharacterQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: CharacterDocument\n  }, options));\n}\n;\nexport const CharactersDocument = gql`\n    query Characters {\n  characters {\n    id\n    name\n    level\n    race\n    klass {\n      id\n      name\n      spellCastingModifier\n    }\n    subclass {\n      id\n      name\n      spellCastingModifier\n    }\n    spells {\n      id\n    }\n  }\n}\n    `;\nexport function useCharactersQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: CharactersDocument\n  }, options));\n}\n;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    username\n  }\n}\n    `;\nexport function useMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n;\nexport const SkillsDocument = gql`\n    query Skills {\n  skills {\n    id\n    name\n    ability\n  }\n}\n    `;\nexport function useSkillsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: SkillsDocument\n  }, options));\n}\n;\nexport const SpellDocument = gql`\n    query Spell($id: ID!) {\n  spell(id: $id) {\n    id\n    name\n    level\n    description\n    klasses\n    concentration\n    ritual\n    duration\n    castingTime\n    range\n    components\n    school\n    attackSave\n    damageEffect\n    material\n  }\n}\n    `;\nexport function useSpellQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: SpellDocument\n  }, options));\n}\n;\nexport const SpellsDocument = gql`\n    query Spells($klassName: String) {\n  spells(klassName: $klassName) {\n    id\n    name\n    level\n    description\n    klasses\n    concentration\n    ritual\n    duration\n    castingTime\n    range\n    components\n    school\n    attackSave\n    damageEffect\n    material\n  }\n}\n    `;\nexport function useSpellsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: SpellsDocument\n  }, options));\n}\n;\nexport const SubclassesDocument = gql`\n    query Subclasses($klassName: String!) {\n  subclasses(klassName: $klassName) {\n    id\n    name\n  }\n}\n    `;\nexport function useSubclassesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: SubclassesDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/generated/graphql.tsx"],"names":["gql","Urql","AddSubclassDocument","useAddSubclassMutation","useMutation","ArmorClassDocument","useArmorClassMutation","CharismaDocument","useCharismaMutation","ConstitutionDocument","useConstitutionMutation","CreateCharacterDocument","useCreateCharacterMutation","DeleteCharacterDocument","useDeleteCharacterMutation","DexterityDocument","useDexterityMutation","ForgetSpellDocument","useForgetSpellMutation","HitPointsDocument","useHitPointsMutation","IntelligenceDocument","useIntelligenceMutation","LearnSpellDocument","useLearnSpellMutation","LevelDocument","useLevelMutation","LoginDocument","useLoginMutation","MaxHitPointsDocument","useMaxHitPointsMutation","PrepareSpellDocument","usePrepareSpellMutation","SignupDocument","useSignupMutation","SkillDocument","useSkillMutation","SpeedDocument","useSpeedMutation","SpellSlotsDocument","useSpellSlotsMutation","StrengthDocument","useStrengthMutation","UnprepareSpellDocument","useUnprepareSpellMutation","WisdomDocument","useWisdomMutation","CharacterDocument","useCharacterQuery","options","useQuery","query","CharactersDocument","useCharactersQuery","MeDocument","useMeQuery","SkillsDocument","useSkillsQuery","SpellDocument","useSpellQuery","SpellsDocument","useSpellsQuery","SubclassesDocument","useSubclassesQuery"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type UserCreateInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirm: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type CharacterCreateInput = {\n  name: Scalars['String'];\n  klassId: Scalars['ID'];\n  race: Scalars['String'];\n  alignment: Scalars['String'];\n};\n\nexport type CharacterUpdateInput = {\n  id: Scalars['ID'];\n  klassId?: Maybe<Scalars['ID']>;\n  skillId?: Maybe<Scalars['ID']>;\n  subclassId?: Maybe<Scalars['ID']>;\n  spellId?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['Int']>;\n  race?: Maybe<Scalars['String']>;\n  alignment?: Maybe<Scalars['String']>;\n  armorClass?: Maybe<Scalars['Int']>;\n  maxHitPoints?: Maybe<Scalars['Int']>;\n  hitPoints?: Maybe<Scalars['Int']>;\n  gold?: Maybe<Scalars['Int']>;\n  inspiration?: Maybe<Scalars['Boolean']>;\n  strength?: Maybe<Scalars['Int']>;\n  dexterity?: Maybe<Scalars['Int']>;\n  constitution?: Maybe<Scalars['Int']>;\n  intelligence?: Maybe<Scalars['Int']>;\n  wisdom?: Maybe<Scalars['Int']>;\n  charisma?: Maybe<Scalars['Int']>;\n  speed?: Maybe<Scalars['Int']>;\n  spellSlots?: Maybe<Scalars['String']>;\n};\n\nexport type CharacterEditSpellInput = {\n  id: Scalars['ID'];\n  spellId: Scalars['ID'];\n};\n\nexport type CharacterDeleteInput = {\n  id: Scalars['ID'];\n};\n\nexport type CharacterAddSubclassInputType = {\n  id: Scalars['ID'];\n  subclassId: Scalars['ID'];\n};\n\nexport type AuthPayload = {\n  __typename?: 'AuthPayload';\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['String'];\n  email: Scalars['String'];\n  username: Scalars['String'];\n  characters: Array<Character>;\n};\n\n\nexport type UserCharactersArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<CharacterWhereUniqueInput>;\n  after?: Maybe<CharacterWhereUniqueInput>;\n};\n\nexport type Spell = {\n  __typename?: 'Spell';\n  id: Scalars['String'];\n  attackSave: Scalars['String'];\n  castingTime: Scalars['String'];\n  klasses: Scalars['String'];\n  components: Scalars['String'];\n  concentration: Scalars['Boolean'];\n  damageEffect: Scalars['String'];\n  description: Scalars['String'];\n  duration: Scalars['String'];\n  level: Scalars['Int'];\n  name: Scalars['String'];\n  range: Scalars['String'];\n  ritual: Scalars['Boolean'];\n  school: Scalars['String'];\n  material?: Maybe<Scalars['String']>;\n  characters: Array<Character>;\n};\n\n\nexport type SpellCharactersArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<CharacterWhereUniqueInput>;\n  after?: Maybe<CharacterWhereUniqueInput>;\n};\n\nexport type Klass = {\n  __typename?: 'Klass';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  hitDie: Scalars['String'];\n  hitPointsAt1st: Scalars['String'];\n  primaryAbility: Array<Scalars['String']>;\n  savingThrows: Array<Scalars['String']>;\n  armor: Array<Scalars['String']>;\n  weapons: Array<Scalars['String']>;\n  tools?: Maybe<Scalars['String']>;\n  skills: Array<Scalars['String']>;\n  spellCastingModifier?: Maybe<Scalars['String']>;\n  proficientSkillsAt1st: Scalars['Int'];\n  subClasses: Array<SubClass>;\n};\n\n\nexport type KlassSubClassesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<SubClassWhereUniqueInput>;\n  after?: Maybe<SubClassWhereUniqueInput>;\n};\n\nexport type SubClass = {\n  __typename?: 'SubClass';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  spellCastingModifier?: Maybe<Scalars['String']>;\n  klassId: Scalars['String'];\n  klass: Klass;\n  source: Scalars['String'];\n};\n\nexport type Skill = {\n  __typename?: 'Skill';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  ability: Scalars['String'];\n};\n\nexport type Character = {\n  __typename?: 'Character';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  level: Scalars['Int'];\n  race: Scalars['String'];\n  klassId: Scalars['String'];\n  klass: Klass;\n  alignment: Scalars['String'];\n  armorClass: Scalars['Int'];\n  hitPoints: Scalars['Int'];\n  maxHitPoints: Scalars['Int'];\n  gold?: Maybe<Scalars['Int']>;\n  inspiration: Scalars['Boolean'];\n  strength: Scalars['Int'];\n  dexterity: Scalars['Int'];\n  constitution: Scalars['Int'];\n  intelligence: Scalars['Int'];\n  wisdom: Scalars['Int'];\n  charisma: Scalars['Int'];\n  userId: Scalars['String'];\n  user: User;\n  spells: Array<Spell>;\n  preparedSpells: Array<Spell>;\n  skills: Array<Skill>;\n  subclass?: Maybe<SubClass>;\n  subclassId?: Maybe<Scalars['String']>;\n  spellSlots?: Maybe<Scalars['String']>;\n  speed: Scalars['Int'];\n};\n\n\nexport type CharacterSpellsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<SpellWhereUniqueInput>;\n  after?: Maybe<SpellWhereUniqueInput>;\n};\n\n\nexport type CharacterPreparedSpellsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<SpellWhereUniqueInput>;\n  after?: Maybe<SpellWhereUniqueInput>;\n};\n\n\nexport type CharacterSkillsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<SkillWhereUniqueInput>;\n  after?: Maybe<SkillWhereUniqueInput>;\n};\n\nexport type CharacterWhereUniqueInput = {\n  id?: Maybe<Scalars['String']>;\n};\n\nexport type SubClassWhereUniqueInput = {\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type SpellWhereUniqueInput = {\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type SkillWhereUniqueInput = {\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  spells: Array<Spell>;\n  spell: Spell;\n  characters: Array<Character>;\n  character: Character;\n  klasses: Array<Klass>;\n  klass: Klass;\n  me: User;\n  skills: Array<Skill>;\n  subclasses: Array<SubClass>;\n};\n\n\nexport type QuerySpellsArgs = {\n  klassName?: Maybe<Scalars['String']>;\n};\n\n\nexport type QuerySpellArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryCharacterArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QueryKlassArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\n\nexport type QuerySubclassesArgs = {\n  klassName: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  signup: AuthPayload;\n  login: AuthPayload;\n  createCharacter: Character;\n  updateCharacter: Character;\n  deleteCharacter?: Maybe<Character>;\n  learnSpell: Character;\n  forgetSpell: Character;\n  prepareSpell: Character;\n  unprepareSpell: Character;\n  addSubclass: Character;\n};\n\n\nexport type MutationSignupArgs = {\n  user?: Maybe<UserCreateInput>;\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationCreateCharacterArgs = {\n  character?: Maybe<CharacterCreateInput>;\n};\n\n\nexport type MutationUpdateCharacterArgs = {\n  character?: Maybe<CharacterUpdateInput>;\n};\n\n\nexport type MutationDeleteCharacterArgs = {\n  character?: Maybe<CharacterDeleteInput>;\n};\n\n\nexport type MutationLearnSpellArgs = {\n  character?: Maybe<CharacterEditSpellInput>;\n};\n\n\nexport type MutationForgetSpellArgs = {\n  character?: Maybe<CharacterEditSpellInput>;\n};\n\n\nexport type MutationPrepareSpellArgs = {\n  character?: Maybe<CharacterEditSpellInput>;\n};\n\n\nexport type MutationUnprepareSpellArgs = {\n  character?: Maybe<CharacterEditSpellInput>;\n};\n\n\nexport type MutationAddSubclassArgs = {\n  character?: Maybe<CharacterAddSubclassInputType>;\n};\n\nexport type AddSubclassMutationVariables = Exact<{\n  id: Scalars['ID'];\n  subclassId: Scalars['ID'];\n}>;\n\n\nexport type AddSubclassMutation = (\n  { __typename?: 'Mutation' }\n  & { addSubclass: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id'>\n    & { subclass?: Maybe<(\n      { __typename?: 'SubClass' }\n      & Pick<SubClass, 'id' | 'name'>\n    )> }\n  ) }\n);\n\nexport type ArmorClassMutationVariables = Exact<{\n  id: Scalars['ID'];\n  armorClass: Scalars['Int'];\n}>;\n\n\nexport type ArmorClassMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'armorClass'>\n  ) }\n);\n\nexport type CharismaMutationVariables = Exact<{\n  id: Scalars['ID'];\n  charisma: Scalars['Int'];\n}>;\n\n\nexport type CharismaMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'charisma'>\n  ) }\n);\n\nexport type ConstitutionMutationVariables = Exact<{\n  id: Scalars['ID'];\n  constitution: Scalars['Int'];\n}>;\n\n\nexport type ConstitutionMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'constitution'>\n  ) }\n);\n\nexport type CreateCharacterMutationVariables = Exact<{\n  name: Scalars['String'];\n  race: Scalars['String'];\n  alignment: Scalars['String'];\n  klassId: Scalars['ID'];\n}>;\n\n\nexport type CreateCharacterMutation = (\n  { __typename?: 'Mutation' }\n  & { createCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name' | 'race' | 'alignment'>\n    & { klass: (\n      { __typename?: 'Klass' }\n      & Pick<Klass, 'id' | 'name'>\n    ) }\n  ) }\n);\n\nexport type DeleteCharacterMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteCharacterMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteCharacter?: Maybe<(\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name'>\n  )> }\n);\n\nexport type DexterityMutationVariables = Exact<{\n  id: Scalars['ID'];\n  dexterity: Scalars['Int'];\n}>;\n\n\nexport type DexterityMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'dexterity'>\n  ) }\n);\n\nexport type ForgetSpellMutationVariables = Exact<{\n  id: Scalars['ID'];\n  spellId: Scalars['ID'];\n}>;\n\n\nexport type ForgetSpellMutation = (\n  { __typename?: 'Mutation' }\n  & { forgetSpell: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name'>\n    & { spells: Array<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'id' | 'name'>\n    )> }\n  ) }\n);\n\nexport type HitPointsMutationVariables = Exact<{\n  id: Scalars['ID'];\n  hitPoints: Scalars['Int'];\n}>;\n\n\nexport type HitPointsMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'hitPoints'>\n  ) }\n);\n\nexport type IntelligenceMutationVariables = Exact<{\n  id: Scalars['ID'];\n  intelligence: Scalars['Int'];\n}>;\n\n\nexport type IntelligenceMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'intelligence'>\n  ) }\n);\n\nexport type LearnSpellMutationVariables = Exact<{\n  id: Scalars['ID'];\n  spellId: Scalars['ID'];\n}>;\n\n\nexport type LearnSpellMutation = (\n  { __typename?: 'Mutation' }\n  & { learnSpell: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name'>\n    & { spells: Array<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'id' | 'name'>\n    )> }\n  ) }\n);\n\nexport type LevelMutationVariables = Exact<{\n  id: Scalars['ID'];\n  level: Scalars['Int'];\n}>;\n\n\nexport type LevelMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'level'>\n  ) }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthPayload' }\n    & Pick<AuthPayload, 'token'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    ) }\n  ) }\n);\n\nexport type MaxHitPointsMutationVariables = Exact<{\n  id: Scalars['ID'];\n  maxHitPoints: Scalars['Int'];\n}>;\n\n\nexport type MaxHitPointsMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'maxHitPoints'>\n  ) }\n);\n\nexport type PrepareSpellMutationVariables = Exact<{\n  id: Scalars['ID'];\n  spellId: Scalars['ID'];\n}>;\n\n\nexport type PrepareSpellMutation = (\n  { __typename?: 'Mutation' }\n  & { prepareSpell: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name'>\n    & { preparedSpells: Array<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'id' | 'name'>\n    )> }\n  ) }\n);\n\nexport type SignupMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirm: Scalars['String'];\n  username: Scalars['String'];\n}>;\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & { signup: (\n    { __typename?: 'AuthPayload' }\n    & Pick<AuthPayload, 'token'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    ) }\n  ) }\n);\n\nexport type SkillMutationVariables = Exact<{\n  id: Scalars['ID'];\n  skillId: Scalars['ID'];\n}>;\n\n\nexport type SkillMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id'>\n    & { skills: Array<(\n      { __typename?: 'Skill' }\n      & Pick<Skill, 'id' | 'name'>\n    )> }\n  ) }\n);\n\nexport type SpeedMutationVariables = Exact<{\n  id: Scalars['ID'];\n  speed: Scalars['Int'];\n}>;\n\n\nexport type SpeedMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'speed'>\n  ) }\n);\n\nexport type SpellSlotsMutationVariables = Exact<{\n  id: Scalars['ID'];\n  spellSlots: Scalars['String'];\n}>;\n\n\nexport type SpellSlotsMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'spellSlots'>\n  ) }\n);\n\nexport type StrengthMutationVariables = Exact<{\n  id: Scalars['ID'];\n  strength: Scalars['Int'];\n}>;\n\n\nexport type StrengthMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'strength'>\n  ) }\n);\n\nexport type UnprepareSpellMutationVariables = Exact<{\n  id: Scalars['ID'];\n  spellId: Scalars['ID'];\n}>;\n\n\nexport type UnprepareSpellMutation = (\n  { __typename?: 'Mutation' }\n  & { unprepareSpell: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name'>\n    & { preparedSpells: Array<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'id' | 'name'>\n    )> }\n  ) }\n);\n\nexport type WisdomMutationVariables = Exact<{\n  id: Scalars['ID'];\n  wisdom: Scalars['Int'];\n}>;\n\n\nexport type WisdomMutation = (\n  { __typename?: 'Mutation' }\n  & { updateCharacter: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'wisdom'>\n  ) }\n);\n\nexport type CharacterQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type CharacterQuery = (\n  { __typename?: 'Query' }\n  & { character: (\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name' | 'level' | 'race' | 'hitPoints' | 'maxHitPoints' | 'armorClass' | 'gold' | 'alignment' | 'inspiration' | 'strength' | 'dexterity' | 'constitution' | 'intelligence' | 'wisdom' | 'charisma' | 'speed' | 'spellSlots'>\n    & { klass: (\n      { __typename?: 'Klass' }\n      & Pick<Klass, 'id' | 'name' | 'hitDie' | 'spellCastingModifier'>\n    ), subclass?: Maybe<(\n      { __typename?: 'SubClass' }\n      & Pick<SubClass, 'id' | 'name' | 'spellCastingModifier'>\n    )>, skills: Array<(\n      { __typename?: 'Skill' }\n      & Pick<Skill, 'id' | 'name' | 'ability'>\n    )>, spells: Array<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'id' | 'name' | 'level' | 'concentration' | 'ritual'>\n    )>, preparedSpells: Array<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'id' | 'name' | 'level' | 'concentration' | 'ritual'>\n    )> }\n  ) }\n);\n\nexport type CharactersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CharactersQuery = (\n  { __typename?: 'Query' }\n  & { characters: Array<(\n    { __typename?: 'Character' }\n    & Pick<Character, 'id' | 'name' | 'level' | 'race'>\n    & { klass: (\n      { __typename?: 'Klass' }\n      & Pick<Klass, 'id' | 'name' | 'spellCastingModifier'>\n    ), subclass?: Maybe<(\n      { __typename?: 'SubClass' }\n      & Pick<SubClass, 'id' | 'name' | 'spellCastingModifier'>\n    )>, spells: Array<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'id'>\n    )> }\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'username'>\n  ) }\n);\n\nexport type SkillsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type SkillsQuery = (\n  { __typename?: 'Query' }\n  & { skills: Array<(\n    { __typename?: 'Skill' }\n    & Pick<Skill, 'id' | 'name' | 'ability'>\n  )> }\n);\n\nexport type SpellQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type SpellQuery = (\n  { __typename?: 'Query' }\n  & { spell: (\n    { __typename?: 'Spell' }\n    & Pick<Spell, 'id' | 'name' | 'level' | 'description' | 'klasses' | 'concentration' | 'ritual' | 'duration' | 'castingTime' | 'range' | 'components' | 'school' | 'attackSave' | 'damageEffect' | 'material'>\n  ) }\n);\n\nexport type SpellsQueryVariables = Exact<{\n  klassName?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type SpellsQuery = (\n  { __typename?: 'Query' }\n  & { spells: Array<(\n    { __typename?: 'Spell' }\n    & Pick<Spell, 'id' | 'name' | 'level' | 'description' | 'klasses' | 'concentration' | 'ritual' | 'duration' | 'castingTime' | 'range' | 'components' | 'school' | 'attackSave' | 'damageEffect' | 'material'>\n  )> }\n);\n\nexport type SubclassesQueryVariables = Exact<{\n  klassName: Scalars['String'];\n}>;\n\n\nexport type SubclassesQuery = (\n  { __typename?: 'Query' }\n  & { subclasses: Array<(\n    { __typename?: 'SubClass' }\n    & Pick<SubClass, 'id' | 'name'>\n  )> }\n);\n\n\nexport const AddSubclassDocument = gql`\n    mutation AddSubclass($id: ID!, $subclassId: ID!) {\n  addSubclass(character: {id: $id, subclassId: $subclassId}) {\n    id\n    subclass {\n      id\n      name\n    }\n  }\n}\n    `;\n\nexport function useAddSubclassMutation() {\n  return Urql.useMutation<AddSubclassMutation, AddSubclassMutationVariables>(AddSubclassDocument);\n};\nexport const ArmorClassDocument = gql`\n    mutation ArmorClass($id: ID!, $armorClass: Int!) {\n  updateCharacter(character: {id: $id, armorClass: $armorClass}) {\n    id\n    armorClass\n  }\n}\n    `;\n\nexport function useArmorClassMutation() {\n  return Urql.useMutation<ArmorClassMutation, ArmorClassMutationVariables>(ArmorClassDocument);\n};\nexport const CharismaDocument = gql`\n    mutation Charisma($id: ID!, $charisma: Int!) {\n  updateCharacter(character: {id: $id, charisma: $charisma}) {\n    id\n    charisma\n  }\n}\n    `;\n\nexport function useCharismaMutation() {\n  return Urql.useMutation<CharismaMutation, CharismaMutationVariables>(CharismaDocument);\n};\nexport const ConstitutionDocument = gql`\n    mutation Constitution($id: ID!, $constitution: Int!) {\n  updateCharacter(character: {id: $id, constitution: $constitution}) {\n    id\n    constitution\n  }\n}\n    `;\n\nexport function useConstitutionMutation() {\n  return Urql.useMutation<ConstitutionMutation, ConstitutionMutationVariables>(ConstitutionDocument);\n};\nexport const CreateCharacterDocument = gql`\n    mutation CreateCharacter($name: String!, $race: String!, $alignment: String!, $klassId: ID!) {\n  createCharacter(character: {name: $name, race: $race, alignment: $alignment, klassId: $klassId}) {\n    id\n    name\n    race\n    alignment\n    klass {\n      id\n      name\n    }\n  }\n}\n    `;\n\nexport function useCreateCharacterMutation() {\n  return Urql.useMutation<CreateCharacterMutation, CreateCharacterMutationVariables>(CreateCharacterDocument);\n};\nexport const DeleteCharacterDocument = gql`\n    mutation DeleteCharacter($id: ID!) {\n  deleteCharacter(character: {id: $id}) {\n    id\n    name\n  }\n}\n    `;\n\nexport function useDeleteCharacterMutation() {\n  return Urql.useMutation<DeleteCharacterMutation, DeleteCharacterMutationVariables>(DeleteCharacterDocument);\n};\nexport const DexterityDocument = gql`\n    mutation Dexterity($id: ID!, $dexterity: Int!) {\n  updateCharacter(character: {id: $id, dexterity: $dexterity}) {\n    id\n    dexterity\n  }\n}\n    `;\n\nexport function useDexterityMutation() {\n  return Urql.useMutation<DexterityMutation, DexterityMutationVariables>(DexterityDocument);\n};\nexport const ForgetSpellDocument = gql`\n    mutation ForgetSpell($id: ID!, $spellId: ID!) {\n  forgetSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    spells {\n      id\n      name\n    }\n  }\n}\n    `;\n\nexport function useForgetSpellMutation() {\n  return Urql.useMutation<ForgetSpellMutation, ForgetSpellMutationVariables>(ForgetSpellDocument);\n};\nexport const HitPointsDocument = gql`\n    mutation HitPoints($id: ID!, $hitPoints: Int!) {\n  updateCharacter(character: {id: $id, hitPoints: $hitPoints}) {\n    id\n    hitPoints\n  }\n}\n    `;\n\nexport function useHitPointsMutation() {\n  return Urql.useMutation<HitPointsMutation, HitPointsMutationVariables>(HitPointsDocument);\n};\nexport const IntelligenceDocument = gql`\n    mutation Intelligence($id: ID!, $intelligence: Int!) {\n  updateCharacter(character: {id: $id, intelligence: $intelligence}) {\n    id\n    intelligence\n  }\n}\n    `;\n\nexport function useIntelligenceMutation() {\n  return Urql.useMutation<IntelligenceMutation, IntelligenceMutationVariables>(IntelligenceDocument);\n};\nexport const LearnSpellDocument = gql`\n    mutation LearnSpell($id: ID!, $spellId: ID!) {\n  learnSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    spells {\n      id\n      name\n    }\n  }\n}\n    `;\n\nexport function useLearnSpellMutation() {\n  return Urql.useMutation<LearnSpellMutation, LearnSpellMutationVariables>(LearnSpellDocument);\n};\nexport const LevelDocument = gql`\n    mutation Level($id: ID!, $level: Int!) {\n  updateCharacter(character: {id: $id, level: $level}) {\n    id\n    level\n  }\n}\n    `;\n\nexport function useLevelMutation() {\n  return Urql.useMutation<LevelMutation, LevelMutationVariables>(LevelDocument);\n};\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    user {\n      username\n    }\n    token\n  }\n}\n    `;\n\nexport function useLoginMutation() {\n  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);\n};\nexport const MaxHitPointsDocument = gql`\n    mutation MaxHitPoints($id: ID!, $maxHitPoints: Int!) {\n  updateCharacter(character: {id: $id, maxHitPoints: $maxHitPoints}) {\n    id\n    maxHitPoints\n  }\n}\n    `;\n\nexport function useMaxHitPointsMutation() {\n  return Urql.useMutation<MaxHitPointsMutation, MaxHitPointsMutationVariables>(MaxHitPointsDocument);\n};\nexport const PrepareSpellDocument = gql`\n    mutation PrepareSpell($id: ID!, $spellId: ID!) {\n  prepareSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    preparedSpells {\n      id\n      name\n    }\n  }\n}\n    `;\n\nexport function usePrepareSpellMutation() {\n  return Urql.useMutation<PrepareSpellMutation, PrepareSpellMutationVariables>(PrepareSpellDocument);\n};\nexport const SignupDocument = gql`\n    mutation Signup($email: String!, $password: String!, $passwordConfirm: String!, $username: String!) {\n  signup(user: {email: $email, password: $password, passwordConfirm: $passwordConfirm, username: $username}) {\n    user {\n      username\n    }\n    token\n  }\n}\n    `;\n\nexport function useSignupMutation() {\n  return Urql.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument);\n};\nexport const SkillDocument = gql`\n    mutation Skill($id: ID!, $skillId: ID!) {\n  updateCharacter(character: {id: $id, skillId: $skillId}) {\n    id\n    skills {\n      id\n      name\n    }\n  }\n}\n    `;\n\nexport function useSkillMutation() {\n  return Urql.useMutation<SkillMutation, SkillMutationVariables>(SkillDocument);\n};\nexport const SpeedDocument = gql`\n    mutation Speed($id: ID!, $speed: Int!) {\n  updateCharacter(character: {id: $id, speed: $speed}) {\n    id\n    speed\n  }\n}\n    `;\n\nexport function useSpeedMutation() {\n  return Urql.useMutation<SpeedMutation, SpeedMutationVariables>(SpeedDocument);\n};\nexport const SpellSlotsDocument = gql`\n    mutation SpellSlots($id: ID!, $spellSlots: String!) {\n  updateCharacter(character: {id: $id, spellSlots: $spellSlots}) {\n    id\n    spellSlots\n  }\n}\n    `;\n\nexport function useSpellSlotsMutation() {\n  return Urql.useMutation<SpellSlotsMutation, SpellSlotsMutationVariables>(SpellSlotsDocument);\n};\nexport const StrengthDocument = gql`\n    mutation Strength($id: ID!, $strength: Int!) {\n  updateCharacter(character: {id: $id, strength: $strength}) {\n    id\n    strength\n  }\n}\n    `;\n\nexport function useStrengthMutation() {\n  return Urql.useMutation<StrengthMutation, StrengthMutationVariables>(StrengthDocument);\n};\nexport const UnprepareSpellDocument = gql`\n    mutation UnprepareSpell($id: ID!, $spellId: ID!) {\n  unprepareSpell(character: {id: $id, spellId: $spellId}) {\n    id\n    name\n    preparedSpells {\n      id\n      name\n    }\n  }\n}\n    `;\n\nexport function useUnprepareSpellMutation() {\n  return Urql.useMutation<UnprepareSpellMutation, UnprepareSpellMutationVariables>(UnprepareSpellDocument);\n};\nexport const WisdomDocument = gql`\n    mutation Wisdom($id: ID!, $wisdom: Int!) {\n  updateCharacter(character: {id: $id, wisdom: $wisdom}) {\n    id\n    wisdom\n  }\n}\n    `;\n\nexport function useWisdomMutation() {\n  return Urql.useMutation<WisdomMutation, WisdomMutationVariables>(WisdomDocument);\n};\nexport const CharacterDocument = gql`\n    query Character($id: ID!) {\n  character(id: $id) {\n    id\n    name\n    level\n    race\n    hitPoints\n    maxHitPoints\n    armorClass\n    gold\n    alignment\n    inspiration\n    strength\n    dexterity\n    constitution\n    intelligence\n    wisdom\n    charisma\n    speed\n    spellSlots\n    klass {\n      id\n      name\n      hitDie\n      spellCastingModifier\n    }\n    subclass {\n      id\n      name\n      spellCastingModifier\n    }\n    skills {\n      id\n      name\n      ability\n    }\n    spells {\n      id\n      name\n      level\n      concentration\n      ritual\n    }\n    preparedSpells {\n      id\n      name\n      level\n      concentration\n      ritual\n    }\n  }\n}\n    `;\n\nexport function useCharacterQuery(options: Omit<Urql.UseQueryArgs<CharacterQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<CharacterQuery>({ query: CharacterDocument, ...options });\n};\nexport const CharactersDocument = gql`\n    query Characters {\n  characters {\n    id\n    name\n    level\n    race\n    klass {\n      id\n      name\n      spellCastingModifier\n    }\n    subclass {\n      id\n      name\n      spellCastingModifier\n    }\n    spells {\n      id\n    }\n  }\n}\n    `;\n\nexport function useCharactersQuery(options: Omit<Urql.UseQueryArgs<CharactersQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<CharactersQuery>({ query: CharactersDocument, ...options });\n};\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    username\n  }\n}\n    `;\n\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\n};\nexport const SkillsDocument = gql`\n    query Skills {\n  skills {\n    id\n    name\n    ability\n  }\n}\n    `;\n\nexport function useSkillsQuery(options: Omit<Urql.UseQueryArgs<SkillsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<SkillsQuery>({ query: SkillsDocument, ...options });\n};\nexport const SpellDocument = gql`\n    query Spell($id: ID!) {\n  spell(id: $id) {\n    id\n    name\n    level\n    description\n    klasses\n    concentration\n    ritual\n    duration\n    castingTime\n    range\n    components\n    school\n    attackSave\n    damageEffect\n    material\n  }\n}\n    `;\n\nexport function useSpellQuery(options: Omit<Urql.UseQueryArgs<SpellQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<SpellQuery>({ query: SpellDocument, ...options });\n};\nexport const SpellsDocument = gql`\n    query Spells($klassName: String) {\n  spells(klassName: $klassName) {\n    id\n    name\n    level\n    description\n    klasses\n    concentration\n    ritual\n    duration\n    castingTime\n    range\n    components\n    school\n    attackSave\n    damageEffect\n    material\n  }\n}\n    `;\n\nexport function useSpellsQuery(options: Omit<Urql.UseQueryArgs<SpellsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<SpellsQuery>({ query: SpellsDocument, ...options });\n};\nexport const SubclassesDocument = gql`\n    query Subclasses($klassName: String!) {\n  subclasses(klassName: $klassName) {\n    id\n    name\n  }\n}\n    `;\n\nexport function useSubclassesQuery(options: Omit<Urql.UseQueryArgs<SubclassesQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<SubclassesQuery>({ query: SubclassesDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}