{"ast":null,"code":"var _jsxFileName = \"/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-stats/ability-scores/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { motion } from 'framer-motion';\nimport { GiBiceps, GiBodyBalance, GiBrain, GiTripleYin, GiDaggerRose, GiHeartWings } from 'react-icons/gi';\nimport { abilityScoreM, savingThrow, proficiencyBonus } from '../../../../../utils/character';\nimport { listVariants, itemVariants } from './animation';\nimport abilityScores from '../../../../../data/abilityScores';\nimport { useStrengthMutation, useDexterityMutation, useConstitutionMutation, useIntelligenceMutation, useWisdomMutation, useCharismaMutation } from '../../../../../generated/graphql';\nimport { useModal } from '../../../../../context/modal';\nimport styles from './styles.module.css';\nvar icons = {\n  strength: __jsx(GiBiceps, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }),\n  dexterity: __jsx(GiBodyBalance, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 14\n    }\n  }),\n  constitution: __jsx(GiHeartWings, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }),\n  intelligence: __jsx(GiBrain, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }),\n  wisdom: __jsx(GiTripleYin, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }),\n  charisma: __jsx(GiDaggerRose, {\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  })\n};\nvar mutations = {\n  strength: useStrengthMutation,\n  dexterity: useDexterityMutation,\n  constitution: useConstitutionMutation,\n  intelligence: useIntelligenceMutation,\n  wisdom: useWisdomMutation,\n  charisma: useCharismaMutation\n};\n\nvar AbilityScores = function AbilityScores(_ref) {\n  _s();\n\n  var character = _ref.character;\n\n  var _useModal = useModal(),\n      openModal = _useModal.openModal;\n\n  return __jsx(React.Fragment, null, __jsx(\"h2\", {\n    className: \"opacity-50 mb-1 font-semibold text-sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Ability Scores\"), __jsx(motion.div, {\n    className: styles.abilityScores,\n    variants: listVariants,\n    animate: \"show\",\n    initial: \"hidden\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, abilityScores.map(function (abilityScore) {\n    return __jsx(motion.button, {\n      type: \"button\",\n      className: styles.abilityScoreContainer,\n      key: abilityScore,\n      variants: itemVariants,\n      onClick: function onClick() {\n        return openModal({\n          type: 'number',\n          props: {\n            originalValue: character[abilityScore],\n            characterId: character.id,\n            title: abilityScore,\n            type: abilityScore.toLowerCase(),\n            mutation: mutations[abilityScore]\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: styles.abilityScoreIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, icons[abilityScore.toLowerCase()]), __jsx(\"div\", {\n      className: styles.abilityScoreTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, abilityScore), __jsx(\"div\", {\n      className: styles.abilityScoreValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, character[abilityScore]), __jsx(\"div\", {\n      className: styles.abilityScoreM,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      className: styles.miniLabel,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, \"mod\"), abilityScoreM(character[abilityScore])), __jsx(\"div\", {\n      className: styles.abilityScoreSave,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      className: styles.miniLabel,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }, \"save\"), savingThrow(character.klass.name, abilityScore, abilityScoreM(character[abilityScore]), proficiencyBonus(character[abilityScore]), character.level)));\n  })));\n};\n\n_s(AbilityScores, \"SvrcxMGNhDbHl8OYqetXtwf/ij0=\", false, function () {\n  return [useModal];\n});\n\n_c = AbilityScores;\nexport { AbilityScores as default };\n\nvar _c;\n\n$RefreshReg$(_c, \"AbilityScores\");","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/components/character/character-sheet/screen-stats/ability-scores/index.tsx"],"names":["motion","GiBiceps","GiBodyBalance","GiBrain","GiTripleYin","GiDaggerRose","GiHeartWings","abilityScoreM","savingThrow","proficiencyBonus","listVariants","itemVariants","abilityScores","useStrengthMutation","useDexterityMutation","useConstitutionMutation","useIntelligenceMutation","useWisdomMutation","useCharismaMutation","useModal","styles","icons","strength","dexterity","constitution","intelligence","wisdom","charisma","mutations","AbilityScores","character","openModal","map","abilityScore","abilityScoreContainer","type","props","originalValue","characterId","id","title","toLowerCase","mutation","abilityScoreIcon","abilityScoreTitle","abilityScoreValue","miniLabel","abilityScoreSave","klass","name","level","default"],"mappings":"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","sourcesContent":["import { motion } from 'framer-motion'\nimport {\n  GiBiceps,\n  GiBodyBalance,\n  GiBrain,\n  GiTripleYin,\n  GiDaggerRose,\n  GiHeartWings,\n} from 'react-icons/gi'\n\nimport {\n  abilityScoreM,\n  savingThrow,\n  proficiencyBonus,\n} from '../../../../../utils/character'\nimport { listVariants, itemVariants } from './animation'\nimport abilityScores from '../../../../../data/abilityScores'\nimport {\n  useStrengthMutation,\n  useDexterityMutation,\n  useConstitutionMutation,\n  useIntelligenceMutation,\n  useWisdomMutation,\n  useCharismaMutation,\n} from '../../../../../generated/graphql'\nimport { AbilityScore } from '../../../../../models/abilityScore'\nimport { CharacterUI } from '../../../../../models/character'\n\nimport { useModal } from '../../../../../context/modal'\nimport styles from './styles.module.css'\n\nconst icons = {\n  strength: <GiBiceps size={16} />,\n  dexterity: <GiBodyBalance size={16} />,\n  constitution: <GiHeartWings size={16} />,\n  intelligence: <GiBrain size={16} />,\n  wisdom: <GiTripleYin size={16} />,\n  charisma: <GiDaggerRose size={16} />,\n}\n\ntype Props = {\n  character: CharacterUI\n}\n\nconst mutations: Record<AbilityScore, Function> = {\n  strength: useStrengthMutation,\n  dexterity: useDexterityMutation,\n  constitution: useConstitutionMutation,\n  intelligence: useIntelligenceMutation,\n  wisdom: useWisdomMutation,\n  charisma: useCharismaMutation,\n}\n\nconst AbilityScores: React.FC<Props> = ({ character }) => {\n  const { openModal } = useModal()\n\n  return (\n    <>\n      <h2 className=\"opacity-50 mb-1 font-semibold text-sm\">Ability Scores</h2>\n      <motion.div\n        className={styles.abilityScores}\n        variants={listVariants}\n        animate=\"show\"\n        initial=\"hidden\"\n      >\n        {abilityScores.map(\n          (abilityScore: AbilityScore): JSX.Element => {\n            return (\n              <motion.button\n                type=\"button\"\n                className={styles.abilityScoreContainer}\n                key={abilityScore}\n                variants={itemVariants}\n                onClick={() =>\n                  openModal({\n                    type: 'number',\n                    props: {\n                      originalValue: character[abilityScore as AbilityScore],\n                      characterId: character.id,\n                      title: abilityScore,\n                      type: abilityScore.toLowerCase(),\n                      mutation: mutations[abilityScore],\n                    },\n                  })\n                }\n              >\n                <div className={styles.abilityScoreIcon}>\n                  {icons[abilityScore.toLowerCase()]}\n                </div>\n                <div className={styles.abilityScoreTitle}>{abilityScore}</div>\n                <div className={styles.abilityScoreValue}>\n                  {character[abilityScore as AbilityScore]}\n                </div>\n                <div className={styles.abilityScoreM}>\n                  <span className={styles.miniLabel}>mod</span>\n                  {abilityScoreM(character[abilityScore as AbilityScore])}\n                </div>\n                <div className={styles.abilityScoreSave}>\n                  <span className={styles.miniLabel}>save</span>\n                  {savingThrow(\n                    character.klass.name,\n                    abilityScore,\n                    abilityScoreM(character[abilityScore]),\n                    proficiencyBonus(character[abilityScore]),\n                    character.level,\n                  )}\n                </div>\n              </motion.button>\n            )\n          },\n        )}\n      </motion.div>\n    </>\n  )\n}\n\nexport { AbilityScores as default }\n"]},"metadata":{},"sourceType":"module"}