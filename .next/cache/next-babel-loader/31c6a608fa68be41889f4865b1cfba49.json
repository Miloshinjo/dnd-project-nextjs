{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as auth from './auth';\nimport * as character from './character';\nexport * from './inputs';\nexport const Mutation = _objectSpread(_objectSpread({}, auth), character);","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/server/types/resolvers/mutations/index.ts"],"names":["auth","character","Mutation"],"mappings":";;;;;;AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AAEA,cAAc,UAAd;AAEA,OAAO,MAAMC,QAAQ,mCAChBF,IADgB,GAEhBC,SAFgB,CAAd","sourcesContent":["import * as auth from './auth'\nimport * as character from './character'\n\nexport * from './inputs'\n\nexport const Mutation = {\n  ...auth,\n  ...character,\n}\n"]},"metadata":{},"sourceType":"module"}