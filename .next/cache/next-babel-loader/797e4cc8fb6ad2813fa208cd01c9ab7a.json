{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\nimport { JWT_SECRET, tokens } from './constants'; // import { seedSpells, seedKlasses, seedSkills, seedSubclasses } from './seed'\n\nconst prisma = new PrismaClient(); // seedSpells(prisma)\n// seedSkills(prisma)\n// seedKlasses(prisma)\n// seedSubclasses(prisma)\n\nconst createContext = ctx => {\n  let userId = null;\n\n  try {\n    const cookie = ctx.req.cookies['jwt'];\n\n    if (cookie) {\n      const decoded = jwt.verify(cookie, JWT_SECRET);\n\n      if (!decoded.userId && decoded.type !== tokens.access.name) {\n        userId = null;\n      } else {\n        userId = decoded.userId;\n      }\n    }\n  } catch (_) {\n    userId = null;\n  }\n\n  return _objectSpread(_objectSpread({}, ctx), {}, {\n    prisma,\n    res: ctx.res,\n    userId\n  });\n};\n\nexport { createContext as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/server/utils/context.ts"],"names":["jwt","PrismaClient","JWT_SECRET","tokens","prisma","createContext","ctx","userId","cookie","req","cookies","decoded","verify","type","access","name","_","res","default"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAGA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,aAAnC,C,CACA;;AAQA,MAAMC,MAAM,GAAG,IAAIH,YAAJ,EAAf,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMI,aAAa,GAAIC,GAAD,IAAuB;AAC3C,MAAIC,MAAqB,GAAG,IAA5B;;AAEA,MAAI;AACF,UAAMC,MAAM,GAAGF,GAAG,CAACG,GAAJ,CAAQC,OAAR,CAAgB,KAAhB,CAAf;;AAEA,QAAIF,MAAJ,EAAY;AACV,YAAMG,OAAY,GAAGX,GAAG,CAACY,MAAJ,CAAWJ,MAAX,EAAmBN,UAAnB,CAArB;;AAEA,UAAI,CAACS,OAAO,CAACJ,MAAT,IAAmBI,OAAO,CAACE,IAAR,KAAiBV,MAAM,CAACW,MAAP,CAAcC,IAAtD,EAA4D;AAC1DR,QAAAA,MAAM,GAAG,IAAT;AACD,OAFD,MAEO;AACLA,QAAAA,MAAM,GAAGI,OAAO,CAACJ,MAAjB;AACD;AACF;AACF,GAZD,CAYE,OAAOS,CAAP,EAAU;AACVT,IAAAA,MAAM,GAAG,IAAT;AACD;;AAED,yCACKD,GADL;AAEEF,IAAAA,MAFF;AAGEa,IAAAA,GAAG,EAAEX,GAAG,CAACW,GAHX;AAIEV,IAAAA;AAJF;AAMD,CAzBD;;AA2BA,SAASF,aAAa,IAAIa,OAA1B","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\nimport { Request } from 'apollo-server-express';\n\nimport { JWT_SECRET, tokens } from './constants';\n// import { seedSpells, seedKlasses, seedSkills, seedSubclasses } from './seed'\n\nexport interface Context {\n  prisma: PrismaClient;\n  req: Request;\n  userId: number;\n}\n\nconst prisma = new PrismaClient();\n\n// seedSpells(prisma)\n// seedSkills(prisma)\n// seedKlasses(prisma)\n// seedSubclasses(prisma)\n\nconst createContext = (ctx: any): Context => {\n  let userId: string | null = null;\n\n  try {\n    const cookie = ctx.req.cookies['jwt'];\n\n    if (cookie) {\n      const decoded: any = jwt.verify(cookie, JWT_SECRET as string);\n\n      if (!decoded.userId && decoded.type !== tokens.access.name) {\n        userId = null;\n      } else {\n        userId = decoded.userId;\n      }\n    }\n  } catch (_) {\n    userId = null;\n  }\n\n  return {\n    ...ctx,\n    prisma,\n    res: ctx.res,\n    userId,\n  };\n};\n\nexport { createContext as default };\n"]},"metadata":{},"sourceType":"module"}