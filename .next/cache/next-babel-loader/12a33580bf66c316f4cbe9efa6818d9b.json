{"ast":null,"code":"import { queryField, idArg, stringArg } from '@nexus/schema';\nimport errors from '../../../utils/errors';\nimport { handleError } from '../../../utils/helpers';\nexport const spells = queryField('spells', {\n  type: 'Spell',\n  args: {\n    klassName: stringArg({\n      nullable: true\n    })\n  },\n  list: true,\n  resolve: async (parent, {\n    klassName\n  }, {\n    prisma\n  }) => {\n    try {\n      if (klassName) {\n        const spells = await prisma.spell.findMany({\n          where: {\n            klasses: {\n              contains: klassName\n            }\n          },\n          orderBy: [{\n            level: 'asc'\n          }, {\n            name: 'asc'\n          }]\n        });\n        return spells;\n      }\n\n      const spells = await prisma.spell.findMany({\n        orderBy: [{\n          level: 'asc'\n        }, {\n          name: 'asc'\n        }]\n      });\n      return spells;\n    } catch (err) {\n      console.log(err);\n      return handleError(errors.serverError);\n    }\n  }\n});\nexport const spell = queryField('spell', {\n  type: 'Spell',\n  args: {\n    id: idArg()\n  },\n  resolve: async (parent, {\n    id\n  }, {\n    prisma\n  }) => {\n    try {\n      const spell = await prisma.spell.findOne({\n        where: {\n          id\n        }\n      });\n      return spell;\n    } catch (err) {\n      console.log(err);\n      return handleError(errors.serverError);\n    }\n  }\n});","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/server/types/resolvers/queries/spell.ts"],"names":["queryField","idArg","stringArg","errors","handleError","spells","type","args","klassName","nullable","list","resolve","parent","prisma","spell","findMany","where","klasses","contains","orderBy","level","name","err","console","log","serverError","id","findOne"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,KAArB,EAA4BC,SAA5B,QAA6C,eAA7C;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,OAAO,MAAMC,MAAM,GAAGL,UAAU,CAAC,QAAD,EAAW;AACzCM,EAAAA,IAAI,EAAE,OADmC;AAEzCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAEN,SAAS,CAAC;AAAEO,MAAAA,QAAQ,EAAE;AAAZ,KAAD;AADhB,GAFmC;AAKzCC,EAAAA,IAAI,EAAE,IALmC;AAMzCC,EAAAA,OAAO,EAAE,OAAOC,MAAP,EAAe;AAAEJ,IAAAA;AAAF,GAAf,EAA8B;AAAEK,IAAAA;AAAF,GAA9B,KAA6C;AACpD,QAAI;AACF,UAAIL,SAAJ,EAAe;AACb,cAAMH,MAAM,GAAG,MAAMQ,MAAM,CAACC,KAAP,CAAaC,QAAb,CAAsB;AACzCC,UAAAA,KAAK,EAAE;AACLC,YAAAA,OAAO,EAAE;AACPC,cAAAA,QAAQ,EAAEV;AADH;AADJ,WADkC;AAMzCW,UAAAA,OAAO,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAD,EAAmB;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAAnB;AANgC,SAAtB,CAArB;AASA,eAAOhB,MAAP;AACD;;AAED,YAAMA,MAAM,GAAG,MAAMQ,MAAM,CAACC,KAAP,CAAaC,QAAb,CAAsB;AACzCI,QAAAA,OAAO,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD,EAAmB;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAnB;AADgC,OAAtB,CAArB;AAIA,aAAOhB,MAAP;AACD,KAnBD,CAmBE,OAAOiB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOlB,WAAW,CAACD,MAAM,CAACsB,WAAR,CAAlB;AACD;AACF;AA9BwC,CAAX,CAAzB;AAiCP,OAAO,MAAMX,KAAK,GAAGd,UAAU,CAAC,OAAD,EAAU;AACvCM,EAAAA,IAAI,EAAE,OADiC;AAEvCC,EAAAA,IAAI,EAAE;AACJmB,IAAAA,EAAE,EAAEzB,KAAK;AADL,GAFiC;AAKvCU,EAAAA,OAAO,EAAE,OAAOC,MAAP,EAAe;AAAEc,IAAAA;AAAF,GAAf,EAAuB;AAAEb,IAAAA;AAAF,GAAvB,KAAsC;AAC7C,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMD,MAAM,CAACC,KAAP,CAAaa,OAAb,CAAqB;AACvCX,QAAAA,KAAK,EAAE;AAAEU,UAAAA;AAAF;AADgC,OAArB,CAApB;AAGA,aAAOZ,KAAP;AACD,KALD,CAKE,OAAOQ,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOlB,WAAW,CAACD,MAAM,CAACsB,WAAR,CAAlB;AACD;AACF;AAfsC,CAAV,CAAxB","sourcesContent":["import { queryField, idArg, stringArg } from '@nexus/schema'\n\nimport errors from '../../../utils/errors'\nimport { handleError } from '../../../utils/helpers'\n\nexport const spells = queryField('spells', {\n  type: 'Spell',\n  args: {\n    klassName: stringArg({ nullable: true }),\n  },\n  list: true,\n  resolve: async (parent, { klassName }, { prisma }) => {\n    try {\n      if (klassName) {\n        const spells = await prisma.spell.findMany({\n          where: {\n            klasses: {\n              contains: klassName,\n            },\n          },\n          orderBy: [{ level: 'asc' }, { name: 'asc' }],\n        })\n\n        return spells\n      }\n\n      const spells = await prisma.spell.findMany({\n        orderBy: [{ level: 'asc' }, { name: 'asc' }],\n      })\n\n      return spells\n    } catch (err) {\n      console.log(err)\n      return handleError(errors.serverError)\n    }\n  },\n})\n\nexport const spell = queryField('spell', {\n  type: 'Spell',\n  args: {\n    id: idArg(),\n  },\n  resolve: async (parent, { id }, { prisma }) => {\n    try {\n      const spell = await prisma.spell.findOne({\n        where: { id },\n      })\n      return spell\n    } catch (err) {\n      console.log(err)\n      return handleError(errors.serverError)\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}