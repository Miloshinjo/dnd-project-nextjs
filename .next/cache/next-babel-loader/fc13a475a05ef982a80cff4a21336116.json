{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as spell from './spell';\nimport * as character from './character';\nimport * as klass from './klass';\nimport * as subclass from './subclass';\nimport * as user from './user';\nimport * as skill from './skill';\nexport const Query = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spell), character), klass), user), skill), subclass);","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/server/types/resolvers/queries/index.ts"],"names":["spell","character","klass","subclass","user","skill","Query"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,OAAO,KAAKC,IAAZ,MAAsB,QAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,OAAO,MAAMC,KAAK,2FACbN,KADa,GAEbC,SAFa,GAGbC,KAHa,GAIbE,IAJa,GAKbC,KALa,GAMbF,QANa,CAAX","sourcesContent":["import * as spell from './spell'\nimport * as character from './character'\nimport * as klass from './klass'\nimport * as subclass from './subclass'\nimport * as user from './user'\nimport * as skill from './skill'\n\nexport const Query = {\n  ...spell,\n  ...character,\n  ...klass,\n  ...user,\n  ...skill,\n  ...subclass,\n}\n"]},"metadata":{},"sourceType":"module"}