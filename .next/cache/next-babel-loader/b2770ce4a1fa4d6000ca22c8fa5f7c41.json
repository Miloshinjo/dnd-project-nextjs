{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { CharacterDocument, SkillsDocument } from '../generated/graphql';\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, data => fn(result, data));\n}\n\nfunction invalidateAllCharacters(cache) {\n  const allFields = cache.inspectFields('Query');\n  const fieldInfos = allFields.filter(info => info.fieldName === 'characters');\n  fieldInfos.forEach(fi => {\n    cache.invalidate('Query', 'characters', fi.arguments || {});\n  });\n}\n\nconst cache = cacheExchange({\n  updates: {\n    Mutation: {\n      createCharacter: (result, args, cache, info) => {\n        cache.invalidate('Query', 'characters');\n      },\n      deleteCharacter: (result, args, cache, info) => {\n        cache.invalidate({\n          __typename: 'Character',\n          id: args.character.id\n        });\n      }\n    }\n  },\n  optimistic: {\n    updateCharacter: (variables, cache, info) => {\n      const _ref = variables.character,\n            {\n        id,\n        skillId\n      } = _ref,\n            restCharacter = _objectWithoutProperties(_ref, [\"id\", \"skillId\"]);\n\n      if (skillId) {\n        // make this better\n        const {\n          character\n        } = cache.readQuery({\n          query: CharacterDocument,\n          variables: {\n            id\n          }\n        });\n        const {\n          skills\n        } = character;\n        const skillsData = cache.readQuery({\n          query: SkillsDocument\n        });\n        const allSkills = skillsData.skills;\n        const isMatch = skills.find(skill => skill.id === skillId);\n\n        if (isMatch) {\n          return {\n            __typename: 'Character',\n            id,\n            skills: skills.filter(skill => skill.id !== skillId)\n          };\n        } else {\n          return {\n            __typename: 'Character',\n            id,\n            skills: [...skills, allSkills.find(skill => skill.id === skillId)]\n          };\n        }\n      }\n\n      return _objectSpread({\n        __typename: 'Character',\n        id\n      }, restCharacter);\n    },\n    forgetSpell: (variables, cache, _) => {\n      const {\n        id,\n        spellId\n      } = variables.character;\n      const {\n        character\n      } = cache.readQuery({\n        query: CharacterDocument,\n        variables: {\n          id\n        }\n      });\n      const {\n        spells,\n        name\n      } = character;\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        spells: spells.filter(spell => spell.id !== spellId)\n      };\n    },\n    prepareSpell: (variables, cache, _) => {\n      const {\n        id,\n        spellId\n      } = variables.character;\n      const {\n        character\n      } = cache.readQuery({\n        query: CharacterDocument,\n        variables: {\n          id\n        }\n      });\n      const {\n        preparedSpells,\n        name\n      } = character;\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        preparedSpells: [...preparedSpells]\n      };\n    },\n    unprepareSpell: (variables, cache, _) => {\n      const {\n        id,\n        spellId\n      } = variables.character;\n      const {\n        character\n      } = cache.readQuery({\n        query: CharacterDocument,\n        variables: {\n          id\n        }\n      });\n      const {\n        preparedSpells,\n        name\n      } = character;\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        preparedSpells: preparedSpells.filter(spell => spell.id !== spellId)\n      };\n    }\n  }\n});\nexport { cache as default };","map":{"version":3,"sources":["/Users/milosdzeletovic/projects/me/dnd-armory/dnd-armory-next/utils/cache.ts"],"names":["cacheExchange","CharacterDocument","SkillsDocument","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","invalidateAllCharacters","allFields","inspectFields","fieldInfos","filter","info","fieldName","forEach","fi","invalidate","arguments","updates","Mutation","createCharacter","args","deleteCharacter","__typename","id","character","optimistic","updateCharacter","variables","skillId","restCharacter","readQuery","query","skills","skillsData","allSkills","isMatch","find","skill","forgetSpell","_","spellId","spells","name","spell","prepareSpell","preparedSpells","unprepareSpell","default"],"mappings":"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","sourcesContent":["import { cacheExchange, QueryInput, Cache } from '@urql/exchange-graphcache'\n\nimport {\n  CharacterDocument,\n  DeleteCharacterMutationVariables,\n  SkillsDocument,\n  SpellDocument,\n} from '../generated/graphql'\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query,\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any)\n}\n\nfunction invalidateAllCharacters(cache: Cache) {\n  const allFields = cache.inspectFields('Query')\n  const fieldInfos = allFields.filter((info) => info.fieldName === 'characters')\n  fieldInfos.forEach((fi) => {\n    cache.invalidate('Query', 'characters', fi.arguments || {})\n  })\n}\n\nconst cache = cacheExchange({\n  updates: {\n    Mutation: {\n      createCharacter: (result, args, cache, info) => {\n        cache.invalidate('Query', 'characters')\n      },\n      deleteCharacter: (result, args, cache, info) => {\n        cache.invalidate({\n          __typename: 'Character',\n          id: (args.character as DeleteCharacterMutationVariables).id,\n        })\n      },\n    },\n  },\n  optimistic: {\n    updateCharacter: (variables, cache, info) => {\n      const { id, skillId, ...restCharacter } = variables.character as any\n\n      if (skillId) {\n        // make this better\n        const { character } = cache.readQuery({\n          query: CharacterDocument,\n          variables: { id },\n        })\n\n        const { skills } = character as any\n\n        const skillsData = cache.readQuery({ query: SkillsDocument })\n\n        const allSkills: any = skillsData.skills\n\n        const isMatch = skills.find((skill) => skill.id === skillId)\n\n        if (isMatch) {\n          return {\n            __typename: 'Character',\n            id,\n            skills: skills.filter((skill) => skill.id !== skillId),\n          }\n        } else {\n          return {\n            __typename: 'Character',\n            id,\n            skills: [\n              ...skills,\n              allSkills.find((skill) => skill.id === skillId),\n            ],\n          }\n        }\n      }\n\n      return {\n        __typename: 'Character',\n        id,\n        ...restCharacter,\n      }\n    },\n    forgetSpell: (variables, cache, _) => {\n      const { id, spellId } = variables.character as any\n\n      const { character } = cache.readQuery({\n        query: CharacterDocument,\n        variables: { id },\n      })\n\n      const { spells, name } = character as any\n\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        spells: spells.filter((spell) => spell.id !== spellId),\n      }\n    },\n    prepareSpell: (variables, cache, _) => {\n      const { id, spellId } = variables.character as any\n\n      const { character } = cache.readQuery({\n        query: CharacterDocument,\n        variables: { id },\n      })\n\n      const { preparedSpells, name } = character as any\n\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        preparedSpells: [...preparedSpells],\n      }\n    },\n    unprepareSpell: (variables, cache, _) => {\n      const { id, spellId } = variables.character as any\n\n      const { character } = cache.readQuery({\n        query: CharacterDocument,\n        variables: { id },\n      })\n\n      const { preparedSpells, name } = character as any\n\n      return {\n        __typename: 'Character',\n        id,\n        name,\n        preparedSpells: preparedSpells.filter((spell) => spell.id !== spellId),\n      }\n    },\n  },\n})\n\nexport { cache as default }\n"]},"metadata":{},"sourceType":"module"}