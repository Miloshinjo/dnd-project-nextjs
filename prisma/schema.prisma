// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model SubClass {
  id                   Int         @id @default(autoincrement())
  name                 String      @unique
  spellCastingModifier String?
  klass                Klass       @relation(fields: [klassId], references: [id])
  klassId              Int
  Character            Character[]
  source               String
}

model Spell {
  id                 Int         @id @default(autoincrement())
  name               String      @unique
  level              Int
  castingTime        String
  range              String
  components         String
  duration           String
  concentration      Boolean
  ritual             Boolean
  school             String
  description        String
  klasses            String
  damageEffect       String
  attackSave         String
  material           String?
  characters         Character[] @relation("KnownSpells", references: [id])
  charactersPrepared Character[] @relation("PreparedSpells", references: [id])
}

model Klass {
  id                    Int         @id @default(autoincrement())
  name                  String      @unique
  description           String
  hitDie                String
  hitPointsAt1st        String
  primaryAbility        String[]
  savingThrows          String[]
  armor                 String[]
  weapons               String[]
  tools                 String?
  skills                String[]
  spellCastingModifier  String?
  proficientSkillsAt1st Int
  characters            Character[]
  subClasses            SubClass[]
}

model Skill {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  ability    String
  characters Character[] @relation(references: [id])
}

model Character {
  id             Int       @id @default(autoincrement())
  name           String
  level          Int       @default(1)
  race           String
  klass          Klass     @relation(fields: [klassId], references: [id])
  klassId        Int
  alignment      String
  armorClass     Int       @default(10)
  hitPoints      Int       @default(10)
  maxHitPoints   Int       @default(10)
  gold           Int?
  inspiration    Boolean   @default(false)
  strength       Int       @default(10)
  dexterity      Int       @default(10)
  constitution   Int       @default(10)
  intelligence   Int       @default(10)
  wisdom         Int       @default(10)
  charisma       Int       @default(10)
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  spells         Spell[]   @relation("KnownSpells")
  preparedSpells Spell[]   @relation("PreparedSpells")
  skills         Skill[]
  subclass       SubClass? @relation(fields: [subclassId], references: [id])
  subclassId     Int?
  spellSlots     String?
  speed          Int       @default(30)
  arcaneWard     Int?
  arcaneWardMax  Int?
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map(name: "email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @default(now()) @map(name: "updated_at")
  characters    Character[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "verification_requests")
}
